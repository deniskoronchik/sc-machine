{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Building Linux Windows Common Config - desciption of a configuration file Sc-element types - detailed description of supported element types SCs-language - documentation on SCs-language with examples C++ API Common - documentation on common principles of C++ API Knowledge processing machine - documentation on Knowledge Processing Machine API Meta programming - documentation of meta programming language Templates - documentation of template usage Tools Knowledge Base builder Web interface Development Pull Request Git workflow Codestyle","title":"Home"},{"location":"#documentation","text":"Building Linux Windows Common Config - desciption of a configuration file Sc-element types - detailed description of supported element types SCs-language - documentation on SCs-language with examples C++ API Common - documentation on common principles of C++ API Knowledge processing machine - documentation on Knowledge Processing Machine API Meta programming - documentation of meta programming language Templates - documentation of template usage Tools Knowledge Base builder Web interface Development Pull Request Git workflow Codestyle","title":"Documentation"},{"location":"changelog/","text":"v0.6.0 Build system : Add support of OSX platform Fix compilation with clang Disable SCP and SCTP compilation by default Support of C++14 Use Ubuntu 18.04 on Travis CI Upgrade libclang to version 7 Tools : Support custom extensions loading in sc-builder Add sc-server application to run claen sc-memory with extensions Refactored code generation tool Refactored knowledge base tool Core : Support list of enabled extensions Support all possible combinations of sc_iterator3 Support variable sc-links Fix bug with repo directory write attributes Fix issue with extension loading on windows Fix issue with empty content of sc-link Refactored file memory to use rocksdb C++ : Implement optional search triples support Fix randomical crash of unittest Improve test system Replace antlr3 with antlr4 for SCs-text parsing Support of SCs-text aliases Support of 5 and 6 levels of SCs-text Refactored test system Refactored API of ScLink and ScStream Add generation of structure from SCs-text Python : Refactored test system Support SCs-templates in WebSocket protocol Add support of template building from SCs-code string Add Aliases method to ScTemplateSearchResult and ScTemplateGenResult Fix issue with float/double values support Add support of logs inside python modules Support ActionAgent states KPM : web : Implement http module to access memory via Web interface Implement web browser interface to access sc-memory Remove of sc-merge module Documentation : Improve SCs-code documentation. Add levels 5 and 6 v0.5.0 Build system : Add Visual Studio 2017 support Core : Fix bug with repository save (case when it output directory doesn't exist) C++ : Fix bugs in python GIL work Fix python threading Fix problem with twicely pass of edge in template search Fix problem with stack overflow on large template search Fix some python wrapping functions Improve ScType class Add types support in SCs-parser Add keynode cache Add ScTemplate build from SCs-text Add support of pending events. Now events emit after whole template generated Python : Add ScAgent class Improve custom main cycle in ScModule Improve python testing Implement ScHelper class Tools : Fix error handling in sc-builder Fix show-filenames parameter processing in sc-builder Documentation Update documentation theme Improve python library documentation Support SCs-syntax highlight in documentation v0.4.1 Add ScSet and ScRelationSet in python common library Add ScPythonService into C++ (allow to implement threaded python services) Add GetType and AsBinary functions into Python for a link content Add colors to python output Add signal handler to handle Ctrl + C Fix bug with python modules search path initialization Fix bug with python threading Fix bug with builder run Fix bug with ScLock Fix bug with Python interpreter shutdown Fix bug with int8_t type support in python bindings Fix bug with template generation, when pass parameter to triple with type that has no constancy flag Fix errors catch during collect python modules Refactoring of C++ Python bridge v0.4.0 Add events support in Python scripts Improve Python scripts run Add common libraries for a Python Fix memory leaks in core Improve test logging Improve work with memory buffers Cleanup API Add support of python 3 code Add ScLockScope class Implement multithreaded python script run Pass cpp_bridge into python script Extract ScWaitEvent as a separated class from ScWait Some fixes in template search Make log thread safe Implement ScLink wrapper class Add ScBase64 encode/decode functions Add common templates generation (see sc_common_templ.hpp ) v0.3.1 Fix templates search error (problems was with triples search order) Implement logging for load extension module problems Remove nl , iot modules from kpm, because they are project specific (moved to a separate repo) Add ForEach function into template search result Add ForEachIter functions into ScMemoryContext Add ScSet class Add support of http requests v0.3.0 Implement search for elements, that has no constancy flag in a type Fix template search error (#251) Fix problem with SC_ASSERT compilation in release mode (#249) Implement SCs-text parser (levels 1 - 4) Agent AApiAiParseUserTextAgent can run commands Implement common function to work with commands in knowledge base Add support of keynode types in codegenerator. Now you can specify type of keynode that would be used to create it: ForceCreate(ScType::Node...) Rename module funcitons from initialize , shutdown , load_priority to sc_module_initialize , sc_module_shutdown , sc_module_load_priority Update code to codestyle. Most functions was renamed from functionName to FunctionName . Iterator value function replaced with Get . Implement support of result codes for action agents Improve unit test system Add MkDocs documentation generator support Add clang-format config Add codestyle document Add documentation for C++ API Implement multithreaded emit of sc-events Implement ref counter for sc-elements Cover whole functionality of C++ API by unit tests Implement C++ API","title":"Changelog"},{"location":"changelog/#v060","text":"Build system : Add support of OSX platform Fix compilation with clang Disable SCP and SCTP compilation by default Support of C++14 Use Ubuntu 18.04 on Travis CI Upgrade libclang to version 7 Tools : Support custom extensions loading in sc-builder Add sc-server application to run claen sc-memory with extensions Refactored code generation tool Refactored knowledge base tool Core : Support list of enabled extensions Support all possible combinations of sc_iterator3 Support variable sc-links Fix bug with repo directory write attributes Fix issue with extension loading on windows Fix issue with empty content of sc-link Refactored file memory to use rocksdb C++ : Implement optional search triples support Fix randomical crash of unittest Improve test system Replace antlr3 with antlr4 for SCs-text parsing Support of SCs-text aliases Support of 5 and 6 levels of SCs-text Refactored test system Refactored API of ScLink and ScStream Add generation of structure from SCs-text Python : Refactored test system Support SCs-templates in WebSocket protocol Add support of template building from SCs-code string Add Aliases method to ScTemplateSearchResult and ScTemplateGenResult Fix issue with float/double values support Add support of logs inside python modules Support ActionAgent states KPM : web : Implement http module to access memory via Web interface Implement web browser interface to access sc-memory Remove of sc-merge module Documentation : Improve SCs-code documentation. Add levels 5 and 6","title":"v0.6.0"},{"location":"changelog/#v050","text":"Build system : Add Visual Studio 2017 support Core : Fix bug with repository save (case when it output directory doesn't exist) C++ : Fix bugs in python GIL work Fix python threading Fix problem with twicely pass of edge in template search Fix problem with stack overflow on large template search Fix some python wrapping functions Improve ScType class Add types support in SCs-parser Add keynode cache Add ScTemplate build from SCs-text Add support of pending events. Now events emit after whole template generated Python : Add ScAgent class Improve custom main cycle in ScModule Improve python testing Implement ScHelper class Tools : Fix error handling in sc-builder Fix show-filenames parameter processing in sc-builder Documentation Update documentation theme Improve python library documentation Support SCs-syntax highlight in documentation","title":"v0.5.0"},{"location":"changelog/#v041","text":"Add ScSet and ScRelationSet in python common library Add ScPythonService into C++ (allow to implement threaded python services) Add GetType and AsBinary functions into Python for a link content Add colors to python output Add signal handler to handle Ctrl + C Fix bug with python modules search path initialization Fix bug with python threading Fix bug with builder run Fix bug with ScLock Fix bug with Python interpreter shutdown Fix bug with int8_t type support in python bindings Fix bug with template generation, when pass parameter to triple with type that has no constancy flag Fix errors catch during collect python modules Refactoring of C++ Python bridge","title":"v0.4.1"},{"location":"changelog/#v040","text":"Add events support in Python scripts Improve Python scripts run Add common libraries for a Python Fix memory leaks in core Improve test logging Improve work with memory buffers Cleanup API Add support of python 3 code Add ScLockScope class Implement multithreaded python script run Pass cpp_bridge into python script Extract ScWaitEvent as a separated class from ScWait Some fixes in template search Make log thread safe Implement ScLink wrapper class Add ScBase64 encode/decode functions Add common templates generation (see sc_common_templ.hpp )","title":"v0.4.0"},{"location":"changelog/#v031","text":"Fix templates search error (problems was with triples search order) Implement logging for load extension module problems Remove nl , iot modules from kpm, because they are project specific (moved to a separate repo) Add ForEach function into template search result Add ForEachIter functions into ScMemoryContext Add ScSet class Add support of http requests","title":"v0.3.1"},{"location":"changelog/#v030","text":"Implement search for elements, that has no constancy flag in a type Fix template search error (#251) Fix problem with SC_ASSERT compilation in release mode (#249) Implement SCs-text parser (levels 1 - 4) Agent AApiAiParseUserTextAgent can run commands Implement common function to work with commands in knowledge base Add support of keynode types in codegenerator. Now you can specify type of keynode that would be used to create it: ForceCreate(ScType::Node...) Rename module funcitons from initialize , shutdown , load_priority to sc_module_initialize , sc_module_shutdown , sc_module_load_priority Update code to codestyle. Most functions was renamed from functionName to FunctionName . Iterator value function replaced with Get . Implement support of result codes for action agents Improve unit test system Add MkDocs documentation generator support Add clang-format config Add codestyle document Add documentation for C++ API Implement multithreaded emit of sc-events Implement ref counter for sc-elements Cover whole functionality of C++ API by unit tests Implement C++ API","title":"v0.3.0"},{"location":"license/","text":"Unless otherwise indicated, Source Code is licensed under MIT license. Copyright (c) 2010-2017 OSTIS Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"thirdparty/","text":"Code generator Based on refactored code from: CPP-Reflection Sc-memory JSON for Modern C++ RocksDB Antlr 4 libclang","title":"Thirdparty"},{"location":"thirdparty/#code-generator","text":"Based on refactored code from: CPP-Reflection","title":"Code generator"},{"location":"thirdparty/#sc-memory","text":"JSON for Modern C++ RocksDB Antlr 4 libclang","title":"Sc-memory"},{"location":"build/linux-build/","text":"This instruction made for Ubuntu. Clone git clone https://github.com/ostis-dev/sc-machine.git cd sc-machine Install dependencies cd scripts ./install_deps_ubuntu.sh cd .. pip3 --user -r requirements.txt Build cd sc-machine mkdir build cd build cmake .. -DCMAKE_BUILD_TYPE = Release # use Debug for debug build make","title":"Build on Linux"},{"location":"build/linux-build/#clone","text":"git clone https://github.com/ostis-dev/sc-machine.git cd sc-machine","title":"Clone"},{"location":"build/linux-build/#install-dependencies","text":"cd scripts ./install_deps_ubuntu.sh cd .. pip3 --user -r requirements.txt","title":"Install dependencies"},{"location":"build/linux-build/#build","text":"cd sc-machine mkdir build cd build cmake .. -DCMAKE_BUILD_TYPE = Release # use Debug for debug build make","title":"Build"},{"location":"build/osx-build/","text":"Clone git clone https://github.com/ostis-dev/sc-machine.git cd sc-machine Install dependencies Setup Java Use package: https://support.apple.com/kb/dl1572?locale=en_US Setup build packages with brew cd scripts ./install_deps_osx.sh cd .. pip3 --user -r requirements.txt Build cd sc-machine mkdir build cd build cmake .. -DCMAKE_BUILD_TYPE = Release # use Debug for debug build make","title":"Build on OSX"},{"location":"build/osx-build/#clone","text":"git clone https://github.com/ostis-dev/sc-machine.git cd sc-machine","title":"Clone"},{"location":"build/osx-build/#install-dependencies","text":"","title":"Install dependencies"},{"location":"build/osx-build/#setup-java","text":"Use package: https://support.apple.com/kb/dl1572?locale=en_US","title":"Setup Java"},{"location":"build/osx-build/#setup-build-packages-with-brew","text":"cd scripts ./install_deps_osx.sh cd .. pip3 --user -r requirements.txt","title":"Setup build packages with brew"},{"location":"build/osx-build/#build","text":"cd sc-machine mkdir build cd build cmake .. -DCMAKE_BUILD_TYPE = Release # use Debug for debug build make","title":"Build"},{"location":"build/windows-build/","text":"Build with Visual Studio 2013: install jre downlaod source code of sc-machine . Run cmake for Visual Studio 2013 with param CMAKE_PREFIX_PATH=<path to QT> . For example: CMAKE_PREFIX_PATH=D:\\Qt\\5.5\\msvc2013_64\\) Setup redis for Windows: https://github.com/MSOpenTech/redis/releases","title":"Build on Windows"},{"location":"cpp/common/","text":"ScLink Include file: #include <sc-memory/cpp/sc_link.hpp> There is a special wrapped class ScLink that makes work with sc-links simple. It allows to set/get common types values. Supported types: uint8_t , uint16_t , uint32_t , uint64_t , int8_t , int16_t , int32_t , int64_t , float , double , std::string . If you try to get Type1 value, but in memory stores Type2 value, then function Get<Type>() will throws an exception ExceptionInvalidParams Example: ... std :: string const str = \"any text value\" ; ScLink link ( linkAddr ); link . Set ( str ); link . IsType < std :: string > (); // will return true std :: string const value = link . Get < std :: string > (); // value == str ... uint32_t const ivalue = 473 ; link . Set ( ivalue ); link . IsType < std :: string > (); // returns false link . IsType < uint32_t > (); // returns true link . IsType < uint8_t > (); // returns false ... link . Get < std :: string > (); // throws ExceptionInvalidParams link . Get < uint32_t > (); // returns stored value link . IsType < uint8_t > (); // throws ExceptionInvalidParams ... Also you can get type of specified ScLink : ScLink link ; link . Set < uint32_t > ( 32 ); link . DetermineType (); // will return ScLink::Type::UInt32 See ScLink::Types for full list of supported ones. You can get value of any ScLink as std::string : ScLink link ; link . Set < uint32_t > ( 32 ); link . GetAsString (); // will return \"32\" Common constructions Include file: #include <sc-memory/cpp/sc_common_templ.hpp> There are some function that allows to make a common routine work: sc::ResolveRelationTuple - allow to ensure that specified quasy_binary relation between tuple and specified element exists. Returns ScAddr of tuple. This function check if specified construction exists, and if it doesn't then generate it by template. Used template for check/generation: Example: ScAddr const tuple = sc :: ResolveRelationTuple ( ctx , el , relAddr ); // where: // el - is a ScAddr of element to ensure tuple exist // relAddr - is a ScAddr of quasy_binary relation sc::SetRelationValue - create sc-link linked to el by relation rel . If it already exist, than changes it value to new one. Returns ScAddr of sc-link. Used template for check/generation: Example: std :: string const value1 = \"test_value\" ; ScAddr const linkAddr1 = sc :: SetRelationValue ( ctx , el , relAddr1 , value1 ); uint32_t const value2 = 57 ; ScAddr const linkAddr2 = sc :: SetRelationValue ( ctx , el , relAddr1 , value2 ); SC_ASSERT ( linkAddr1 == linkAddr2 , ()); // should be valid (ScAddr of link doesn't changed) Iterators You can use 3-element iterators and 5-element iterators from c++ code. Image below shows numeration of elements in 3-element (left) and 5-element (right) iterators. For both of them you have two approaches. First approach to use simple while loop. It suitable, when you need to break this loop depending on logic: ... // example of f_a_a iterator ScIterator3Ptr it3 = ctx . Iterator3 ( set , ScType :: EdgeAccessConstPosPerm , ScType :: Unknown ); while ( it3 -> Next ()) { // to get values use it3->Get(index), where index in range [0; 2] ... // there is you code } ... // example of f_a_a_a_f iterator ScIterator5Ptr it5 = ctx . Iterator5 ( objAddr , ScType :: EdgeDCommonConst , ScType :: NodeConstAbstract , ScType :: EdgeAccessConstPosPerm , Keynodes :: nrel_mass ); while ( it5 -> Next ()) { // to get values use it5->Get(index), where index in range [0; 4] ... // there is you code } Second approach allows you iterate 3-element and 5-element constructions with less code, and suitable when you need to iterate all results. Use it if you need to iterate all results. Because it more clearly. ... ctx . ForEachIter3 ( set , ScType :: EdgeAccessConstPosPerm , ScType :: Unknown , [] ( ScAddr const & src , ScAddr const & edge , ScAddr const & trg ) { // src equal to 0 value of iterator // edge equal to 1 value of iterator // trg equal to 2 value of iterator ... // there is you code }); ... ctx . ForEachIter5 ( objAddr , ScType :: EdgeDCommonConst , ScType :: NodeConstAbstract , ScType :: EdgeAccessConstPosPerm , Keynodes :: nrel_mass [] ( ScAddr const & src , ScAddr const & edge , ScAddr const & trg , ScAddr const & edgeAttr , ScAddr const & attr ) { // src equal to 0 value of iterator // edge equal to 1 value of iterator // trg equal to 2 value of iterator // edgeAttr equal to 3 value of iterator // attr equal to 4 value of iterator ... // there is you code }); HTTP You can use ScHttpRequest class to make requests using HTTP protocol: ... ScHttpRequest request ( \"http://any.url\" ); request . SetType ( ScHttpRequest :: Type :: POST ); request . SetData ( \"any data\" ); request . AddHeader ( \"Content-Type: application/json\" ); request . AddHeader (...); request . Perform (); auto const response = request . GetResponse (); if ( response . IsPtrValid () && response -> IsSuccess ()) { auto const & responseStr = response -> GetData (); // process responseStr return true ; } ...","title":"Common"},{"location":"cpp/common/#sclink","text":"Include file: #include <sc-memory/cpp/sc_link.hpp> There is a special wrapped class ScLink that makes work with sc-links simple. It allows to set/get common types values. Supported types: uint8_t , uint16_t , uint32_t , uint64_t , int8_t , int16_t , int32_t , int64_t , float , double , std::string . If you try to get Type1 value, but in memory stores Type2 value, then function Get<Type>() will throws an exception ExceptionInvalidParams Example: ... std :: string const str = \"any text value\" ; ScLink link ( linkAddr ); link . Set ( str ); link . IsType < std :: string > (); // will return true std :: string const value = link . Get < std :: string > (); // value == str ... uint32_t const ivalue = 473 ; link . Set ( ivalue ); link . IsType < std :: string > (); // returns false link . IsType < uint32_t > (); // returns true link . IsType < uint8_t > (); // returns false ... link . Get < std :: string > (); // throws ExceptionInvalidParams link . Get < uint32_t > (); // returns stored value link . IsType < uint8_t > (); // throws ExceptionInvalidParams ... Also you can get type of specified ScLink : ScLink link ; link . Set < uint32_t > ( 32 ); link . DetermineType (); // will return ScLink::Type::UInt32 See ScLink::Types for full list of supported ones. You can get value of any ScLink as std::string : ScLink link ; link . Set < uint32_t > ( 32 ); link . GetAsString (); // will return \"32\"","title":"ScLink"},{"location":"cpp/common/#common-constructions","text":"Include file: #include <sc-memory/cpp/sc_common_templ.hpp> There are some function that allows to make a common routine work: sc::ResolveRelationTuple - allow to ensure that specified quasy_binary relation between tuple and specified element exists. Returns ScAddr of tuple. This function check if specified construction exists, and if it doesn't then generate it by template. Used template for check/generation: Example: ScAddr const tuple = sc :: ResolveRelationTuple ( ctx , el , relAddr ); // where: // el - is a ScAddr of element to ensure tuple exist // relAddr - is a ScAddr of quasy_binary relation sc::SetRelationValue - create sc-link linked to el by relation rel . If it already exist, than changes it value to new one. Returns ScAddr of sc-link. Used template for check/generation: Example: std :: string const value1 = \"test_value\" ; ScAddr const linkAddr1 = sc :: SetRelationValue ( ctx , el , relAddr1 , value1 ); uint32_t const value2 = 57 ; ScAddr const linkAddr2 = sc :: SetRelationValue ( ctx , el , relAddr1 , value2 ); SC_ASSERT ( linkAddr1 == linkAddr2 , ()); // should be valid (ScAddr of link doesn't changed)","title":"Common constructions"},{"location":"cpp/common/#iterators","text":"You can use 3-element iterators and 5-element iterators from c++ code. Image below shows numeration of elements in 3-element (left) and 5-element (right) iterators. For both of them you have two approaches. First approach to use simple while loop. It suitable, when you need to break this loop depending on logic: ... // example of f_a_a iterator ScIterator3Ptr it3 = ctx . Iterator3 ( set , ScType :: EdgeAccessConstPosPerm , ScType :: Unknown ); while ( it3 -> Next ()) { // to get values use it3->Get(index), where index in range [0; 2] ... // there is you code } ... // example of f_a_a_a_f iterator ScIterator5Ptr it5 = ctx . Iterator5 ( objAddr , ScType :: EdgeDCommonConst , ScType :: NodeConstAbstract , ScType :: EdgeAccessConstPosPerm , Keynodes :: nrel_mass ); while ( it5 -> Next ()) { // to get values use it5->Get(index), where index in range [0; 4] ... // there is you code } Second approach allows you iterate 3-element and 5-element constructions with less code, and suitable when you need to iterate all results. Use it if you need to iterate all results. Because it more clearly. ... ctx . ForEachIter3 ( set , ScType :: EdgeAccessConstPosPerm , ScType :: Unknown , [] ( ScAddr const & src , ScAddr const & edge , ScAddr const & trg ) { // src equal to 0 value of iterator // edge equal to 1 value of iterator // trg equal to 2 value of iterator ... // there is you code }); ... ctx . ForEachIter5 ( objAddr , ScType :: EdgeDCommonConst , ScType :: NodeConstAbstract , ScType :: EdgeAccessConstPosPerm , Keynodes :: nrel_mass [] ( ScAddr const & src , ScAddr const & edge , ScAddr const & trg , ScAddr const & edgeAttr , ScAddr const & attr ) { // src equal to 0 value of iterator // edge equal to 1 value of iterator // trg equal to 2 value of iterator // edgeAttr equal to 3 value of iterator // attr equal to 4 value of iterator ... // there is you code });","title":"Iterators"},{"location":"cpp/common/#http","text":"You can use ScHttpRequest class to make requests using HTTP protocol: ... ScHttpRequest request ( \"http://any.url\" ); request . SetType ( ScHttpRequest :: Type :: POST ); request . SetData ( \"any data\" ); request . AddHeader ( \"Content-Type: application/json\" ); request . AddHeader (...); request . Perform (); auto const response = request . GetResponse (); if ( response . IsPtrValid () && response -> IsSuccess ()) { auto const & responseStr = response -> GetData (); // process responseStr return true ; } ...","title":"HTTP"},{"location":"cpp/cpp-meta/","text":"There is a code generator that allows to create some common code by using metadata. It runs before code compilation and generate files with a name <header_name>.generated.<header_extension> . For example if you run it for a file text.h it would produce a file text.generated.h To make a metadata for you code you can use this set of macros: * SC_CLASS - allows you to specify metadata for a class; * SC_GENERATED_BODY - macros that need to be used after SC_CLASS , because it would be replaced in during compilation time with generated declaration for this class; * SC_PROPERTY - allows to specify metadata for members of a class (including static members). You should to specify SC_CLASS and SC_GENERATED_BODY for all child classes of ScObject Syntax There is a syntax rule that used for a metadata specification: [<PropertyName> [ (<PropertyValue>, <PropertyValue>, ...) ] ], \u2026 For example: SC_CLASS ( Agent , CmdClass ( \"command_update_power_usage\" )) SC_CLASS ( CmdClass ( \"command_generate_text_from_template\" ), Agent ) SC_PROPERTY ( Keynode ( \"nrel_real_energy_usage\" ), ForceCreate ) SC_CLASS ( Agent , Event ( ActionManager :: msActionPeriodical , SC_EVENT_ADD_OUTPUT_ARC )) You should to use SC_CLASS and SC_GENERATED_BODY in class declaration: class AWhoAreYouAgent : public ScAgentAction { SC_CLASS ( Agent , CmdClass ( \"command_who_are_you\" )) SC_GENERATED_BODY () }; Classes Table of available properties of class metadata ( SC_CLASS ): Property Description Agent Parent class: ScAgent and all childs You should always use it for all ScAgent child classes CmdClass Determine system identifier of command class that implemented by sc-agent. Parent class: ScAgentAction Arguments: System identifier of command class. class AAddContentAgent : public ScAgentAction { SC_CLASS(Agent, CmdClass(\"command_add_content\")) SC_GENERATED_BODY() }; Event Specify condition to start sc-agent implementation. Parent class: ScAgent Arguments: ScAddr of element which will be used to subscribe for an event; ScEventType type of event to subscribe. Another words, we specify sc-element and event on it, that runs implementation of sc-agent. Possible event types: SC_EVENT_ADD_OUTPUT_ARC SC_EVENT_ADD_INPUT_ARC SC_EVENT_REMOVE_OUTPUT_ARC SC_EVENT_REMOVE_INPUT_ARC SC_EVENT_REMOVE_ELEMENT SC_EVENT_CONTENT_CHANGED class ANewPeriodicalActionAgent : public ScAgent { SC_CLASS(Agent, Event(msActionPeriodical, SC_EVENT_ADD_OUTPUT_ARC)) SC_GENERATED_BODY() }; LoadOrder Specify order (priority) of module loading. Can be used just in ScModule child classes. Parent class: ScModule Arguments: Priority as unsigned int number System loads modules by ascending order. If two module has an equal load order, then they can load in any order (relative to each other). class nlModule : public ScModule { SC_CLASS(LoadOrder(11)) SC_GENERATED_BODY() sc_result initializeImpl(); sc_result shutdownImpl(); }; Members Table of available properties of class members metadata ( SC_PROPERTY ): Property Description Keynode Arguments: String with system identifier of sc-element. Specify that this member is a keynode. After module starts, this member will contains ScAddr of specified sc-element or invalid ScAddr if sc-element not found. Just add ForceCreate to create sc-element in case when it didn't found. You can use this property just for members that has ScAddr type. SC_PROPERTY(Keynode(\"device\"), ForceCreate) static ScAddr m_device; Template Arguments: String system identifier of template sc-structure in sc-memory Specify that this member is a template. After module starts, this template will be parsed from sc-memory. So you will be able use it to search/generate constructions. You can use this property just for members that has ScTemplate type. SC_PROPERTY(Template(\"test_template\")) ScTemplate m_testTemplate; ForceCreate Arguments: [ optional ] type of sc-element. Any value from ScType::Node... Used just with Keynode property. Using of this property force sc-element creation, if it didn't found by system identifier. SC_PROPERTY(Keynode(\"device\"), ForceCreate(ScType::NodeConstClass)) static ScAddr m_device; SC_PROPERTY(Keynode(\"device\"), ForceCreate) // default value ScType::Node static ScAddr m_node; FAQ How to include one MyObject into OtherObject /* In CPP file you should include header file for object, that implemented in this file * For example in file MyObject.cpp we should make order */ #include \"otherObject.hpp\" #include \"otherObject2.hpp\" ... #include \"myObject.hpp\" // other includes (that doesn't contains ScObject derived classes) ... // Implementation ...","title":"Meta programming"},{"location":"cpp/cpp-meta/#syntax","text":"There is a syntax rule that used for a metadata specification: [<PropertyName> [ (<PropertyValue>, <PropertyValue>, ...) ] ], \u2026 For example: SC_CLASS ( Agent , CmdClass ( \"command_update_power_usage\" )) SC_CLASS ( CmdClass ( \"command_generate_text_from_template\" ), Agent ) SC_PROPERTY ( Keynode ( \"nrel_real_energy_usage\" ), ForceCreate ) SC_CLASS ( Agent , Event ( ActionManager :: msActionPeriodical , SC_EVENT_ADD_OUTPUT_ARC )) You should to use SC_CLASS and SC_GENERATED_BODY in class declaration: class AWhoAreYouAgent : public ScAgentAction { SC_CLASS ( Agent , CmdClass ( \"command_who_are_you\" )) SC_GENERATED_BODY () };","title":"Syntax"},{"location":"cpp/cpp-meta/#classes","text":"Table of available properties of class metadata ( SC_CLASS ): Property Description Agent Parent class: ScAgent and all childs You should always use it for all ScAgent child classes CmdClass Determine system identifier of command class that implemented by sc-agent. Parent class: ScAgentAction Arguments: System identifier of command class. class AAddContentAgent : public ScAgentAction { SC_CLASS(Agent, CmdClass(\"command_add_content\")) SC_GENERATED_BODY() }; Event Specify condition to start sc-agent implementation. Parent class: ScAgent Arguments: ScAddr of element which will be used to subscribe for an event; ScEventType type of event to subscribe. Another words, we specify sc-element and event on it, that runs implementation of sc-agent. Possible event types: SC_EVENT_ADD_OUTPUT_ARC SC_EVENT_ADD_INPUT_ARC SC_EVENT_REMOVE_OUTPUT_ARC SC_EVENT_REMOVE_INPUT_ARC SC_EVENT_REMOVE_ELEMENT SC_EVENT_CONTENT_CHANGED class ANewPeriodicalActionAgent : public ScAgent { SC_CLASS(Agent, Event(msActionPeriodical, SC_EVENT_ADD_OUTPUT_ARC)) SC_GENERATED_BODY() }; LoadOrder Specify order (priority) of module loading. Can be used just in ScModule child classes. Parent class: ScModule Arguments: Priority as unsigned int number System loads modules by ascending order. If two module has an equal load order, then they can load in any order (relative to each other). class nlModule : public ScModule { SC_CLASS(LoadOrder(11)) SC_GENERATED_BODY() sc_result initializeImpl(); sc_result shutdownImpl(); };","title":"Classes"},{"location":"cpp/cpp-meta/#members","text":"Table of available properties of class members metadata ( SC_PROPERTY ): Property Description Keynode Arguments: String with system identifier of sc-element. Specify that this member is a keynode. After module starts, this member will contains ScAddr of specified sc-element or invalid ScAddr if sc-element not found. Just add ForceCreate to create sc-element in case when it didn't found. You can use this property just for members that has ScAddr type. SC_PROPERTY(Keynode(\"device\"), ForceCreate) static ScAddr m_device; Template Arguments: String system identifier of template sc-structure in sc-memory Specify that this member is a template. After module starts, this template will be parsed from sc-memory. So you will be able use it to search/generate constructions. You can use this property just for members that has ScTemplate type. SC_PROPERTY(Template(\"test_template\")) ScTemplate m_testTemplate; ForceCreate Arguments: [ optional ] type of sc-element. Any value from ScType::Node... Used just with Keynode property. Using of this property force sc-element creation, if it didn't found by system identifier. SC_PROPERTY(Keynode(\"device\"), ForceCreate(ScType::NodeConstClass)) static ScAddr m_device; SC_PROPERTY(Keynode(\"device\"), ForceCreate) // default value ScType::Node static ScAddr m_node;","title":"Members"},{"location":"cpp/cpp-meta/#faq","text":"How to include one MyObject into OtherObject /* In CPP file you should include header file for object, that implemented in this file * For example in file MyObject.cpp we should make order */ #include \"otherObject.hpp\" #include \"otherObject2.hpp\" ... #include \"myObject.hpp\" // other includes (that doesn't contains ScObject derived classes) ... // Implementation ...","title":"FAQ"},{"location":"cpp/el_types/","text":"TODO: Describe types there TODO: Types compare during search Graphical (SCg) C C++ sc_type_node ScType::Node sc_type_node | sc_type_const ScType::NodeConst sc_type_node | sc_type_var ScType::NodeVar sc_type_node | sc_type_const | sc_type_node_tuple ScType::NodeConstTuple sc_type_node | sc_type_var | sc_type_node_tuple ScType::NodeVarTuple sc_type_node | sc_type_const | sc_type_node_struct ScType::NodeConstStruct sc_type_node | sc_type_var | sc_type_node_struct ScType::NodeVarStruct sc_type_node | sc_type_const | sc_type_node_role ScType::NodeConstRole sc_type_node | sc_type_var | sc_type_node_role ScType::NodeVarRole sc_type_node | sc_type_const | sc_type_node_norole ScType::NodeConstNorole sc_type_node | sc_type_var | sc_type_node_norole ScType::NodeVarNorole sc_type_node | sc_type_const | sc_type_node_class ScType::NodeConstClass sc_type_node | sc_type_var | sc_type_node_class ScType::NodeVarClass sc_type_node | sc_type_const | sc_type_node_abstract ScType::NodeConstAbstract sc_type_node | sc_type_var | sc_type_node_abstract ScType::NodeVarAbstract sc_type_node | sc_type_const | sc_type_node_material ScType::NodeConstMaterial sc_type_node | sc_type_var | sc_type_node_material ScType::NodeVarMaterial sc_type_edge_common ScType::EdgeUCommon sc_type_arc_common ScType::EdgeDCommon sc_type_edge_common | sc_type_const ScType::EdgeUCommonConst sc_type_edge_common | sc_type_var ScType::EdgeUCommonVar sc_type_arc_common | sc_type_const ScType::EdgeDCommonConst sc_type_arc_common | sc_type_var ScType::EdgeDCommonVar sc_type_arc_access ScType::EdgeAccess sc_type_arc_access | sc_type_const | sc_type_arc_pos | sc_type_arc_perm ScType::EdgeAccessConstPosPerm sc_type_arc_access | sc_type_var | sc_type_arc_pos | sc_type_arc_perm ScType::EdgeAccessVarPosPerm sc_type_arc_access | sc_type_const | sc_type_arc_neg | sc_type_arc_perm ScType::EdgeAccessConstNegPerm sc_type_arc_access | sc_type_var | sc_type_arc_neg | sc_type_arc_perm ScType::EdgeAccessVarNegPerm sc_type_arc_access | sc_type_const | sc_type_arc_fuz | sc_type_arc_perm ScType::EdgeAccessConstFuzPerm sc_type_arc_access | sc_type_var | sc_type_arc_fuz | sc_type_arc_perm ScType::EdgeAccessVarFuzPerm sc_type_arc_access | sc_type_const | sc_type_arc_pos | sc_type_arc_temp ScType::EdgeAccessConstPosTemp sc_type_arc_access | sc_type_var | sc_type_arc_pos | sc_type_arc_temp ScType::EdgeAccessVarPosPerm sc_type_arc_access | sc_type_const | sc_type_arc_neg | sc_type_arc_temp ScType::EdgeAccessConstNegTemp sc_type_arc_access | sc_type_var | sc_type_arc_neg | sc_type_arc_temp ScType::EdgeAccessVarNegPerm sc_type_arc_access | sc_type_const | sc_type_arc_fuz | sc_type_arc_temp ScType::EdgeAccessConstFuzTemp sc_type_arc_access | sc_type_var | sc_type_arc_fuz | sc_type_arc_temp ScType::EdgeAccessVarFuzPerm","title":"Element types"},{"location":"cpp/kpm/","text":"Knowledge processing machine (KPM) - is a set of modules. Each module contains implementation of sc-agents. Also they can contains any other functions and classes, than used by sc-agents implementation. ScModule Module - is a dynamic library. That implement specified module class. To create module you need to do next steps: Create directory for you module in sc-kpm. For example: sc-kpm/nl ; Go to created directory; Create file CMakeLists.txt with content (replace nl (module name) to yours one: CMakeLists.txt set ( SC_IOT_SRC ${ CMAKE_CURRENT_LIST_DIR } ) set ( SOURCES \"nl.cpp\" ) set ( HEADERS \"nl.hpp\" ) include_directories ( ${ SC_IOT_SRC } ${ SC_MEMORY_SRC } ) add_library ( nl SHARED ${ SOURCES } ${ HEADERS } ) add_dependencies ( nl sc-memory-cpp ) target_link_libraries ( nl sc-memory-cpp ) sc_codegen ( nl ${ SC_IOT_SRC } ) After that you need to create two files (cpp, hpp): nl.hpp #pragma once #include <sc-memory/cpp/sc_module.hpp> #include \"nl.generated.hpp\" class nlModule : public ScModule { SC_CLASS ( LoadOrder ( 11 )) SC_GENERATED_BODY () virtual sc_result InitializeImpl () override ; virtual sc_result ShutdownImpl () override ; }; nl.cpp #include \"nl.hpp\" SC_IMPLEMENT_MODULE ( nlModule ) sc_result nlModule :: InitializeImpl () { return SC_RESULT_OK ; } sc_result nlModule :: ShutdownImpl () { return SC_RESULT_OK ; } ScAgent To create sc-agent implementation you need: create source and header file for sc-agent implementation add created files into CMakeLists.txt CMakeLists.txt ... set ( SOURCES \"nl.cpp\" \"nlApiAi.cpp\" ) set ( HEADERS \"nl.hpp\" \"nlApiAi.hpp\" ) ... nlApiAi.hpp #pragma once #include \"wrap/kpm/sc_agent.hpp\" #include \"nlApiAi.generated.hpp\" namespace nl { class AApiAiParseUserTextAgent : public ScAgentAction { SC_CLASS ( Agent , CmdClass ( \"command_process_user_text_message\" )) SC_GENERATED_BODY () }; } nlApiAi.cpp #include \"nlApiAi.hpp\" namespace nl { SC_AGENT_ACTION_IMPLEMENTATION ( AApiAiParseUserTextAgent ) { // implement agent logic there return SC_RESULT_ERROR ; } } SC_AGENT_ACTION_IMPLEMENTATION - is a macros that insert generated code an minimize work. You just insert this one (with class name as parameter), and implement it like a function. During implementation you can use such variables: * requestAddr - ScAddr of command (action) instance that was initiated; * resultAddr - ScAddr of sc-structure that designate command (action) result; * mMemoryCtx - memory context that can be used to work with ScMemory . If sc-agent finished work without any errors, then it must return SC_RESULT_OK , otherwise - one of code error SC_RESULT_ERROR_... . Result of agent will be automaticaly added into specified set: Possible result sets: sc_result_error - unknown error; sc_result_ok - no any errors (successfull finish); sc_result_error_invalid_params - invalid parameters of agent; sc_result_error_invalid_type - invalid type error (invalid type of data of something else); sc_result_error_io - input/output error (can't read/write something from/to any source); sc_result_invalid_state - invalid state of processing data; sc_result_error_not_found - something wasn't found (for example: can't resolve element by identifier); sc_result_error_no_write_rights - agent hasn't rights to write something; sc_result_error_no_read_rights - agent hans't rights to read something. It's important: All sc-agents class names must to be started with A symbol; You can implement more than one ScAgent class in on source/header file; Don't use any other memory contexts instead of mMemoryCtx in ScAgent implementation; You need always include <you_header>.generated.hpp file into your header, if you have any metadata. This include must be a last one in a file. ScEvent This type of objects allows you to subscribe to any events in ScMemory . There are c++ classes that correspond to specified event types: ScEventAddOutputEdge - emits each time, when output (outgoing) edge (from specified element) added; ScEventAddInputEdge - emits each time, when input (ingoing) edge (into specified element) added; ScEventRemoveOutputEdge - emits each time, when output (outgoing) edge (from specified element) removed; ScEventRemoveInputEdge - emits each time, when input (ingoing) edge (into specified element) removed; ScEventEraseElement - emits, when specified element removed; ScEventContentChanged - emits each time, when content of specified sc-link changed. Each event constructor takes 3 parameters: ctx - ScMemoryContext that will be used to work with event; addr - ScAddr of element that need to be listen for a specified event; func - delegate to a callback function, that will be called on each event emit ( bool func(ScAddr const & listenAddr, ScAddr const & edgeAddr, ScAddr const & otherAddr) ). Description of parameters for this function you can see in table below (for each event type). Note: callback function will be called in another thread! Table of description (parameters of callback function named on pictures, if there are no parameter name on picture, then it's would have an empty value): Class Description ScEventAddOutputEdge Callback calls each time, when any type edge edgeAddr between listenAddr and otherAddr create. Example C++ code : auto const callback { // listenAddr - ScAddr of source element // (listen it in event) // edgeAddr - ScAddr of added output edge // otherAddr - target element of added edge ... return true; // if failed, then return false }; ScEventAddOutputEdge evt(ctx, addr, callback); ScEventAddInputEdge Callback calls each time, when any type edge edgeAddr between otherAddr and listenAddr create. Example C++ code : auto const callback { // listenAddr - ScAddr of target element // (listen it in event) // edgeAddr - ScAddr of added input edge // otherAddr - source element of added edge ... return true; // if failed, then return false }; ScEventAddInputEdge evt(ctx, addr, callback); ScEventRemoveOutputEdge Callback calls each time, when any type edge edgeAddr between listenAddr and any element otherAddr erase. Example C++ code : auto const callback { // listenAddr - ScAddr of source element // (listen it in event) // edgeAddr - ScAddr of erased output edge // otherAddr - target element of erased edge ... return true; // if failed, then return false }; ScEventRemoveOutputEdge evt(ctx, addr, callback); ScEventRemoveInputEdge Callback calls each time, when any type edge edgeAddr between any element otherAddr and listenAddr erase. Example C++ code : auto const callback { // listenAddr - ScAddr of target element // (listen it in event) // edgeAddr - ScAddr of erased input edge // otherAddr - source element of erased edge ... return true; // if failed, then return false }; ScEventRemoveOutputEdge evt(ctx, addr, callback); ScEventEraseElement Callback calls when listenAddr erased. Example C++ code : auto const callback { // listenAddr - ScAddr of erased element // (listen it in event) // edgeAddr - empty // otherAddr - empty ... return true; // if failed, then return false }; ScEventEraseElement evt(ctx, addr, callback); ScEventContentChanged Callback calls when content of listenAddr changed. Example C++ code : auto const callback { // listenAddr - ScAddr of element that has // content changed (listen it in event) // edgeAddr - empty // otherAddr - empty ... return true; // if failed, then return false }; ScEventContentChanged evt(ctx, addr, callback); ScWait This type of objects used to wait until some event emits. It usually used, when on of an ScAgent want to wait result of another one. There are next kind of ScWait objects: ScWait - lock run flow until simple event emits. You can see the list of this events in the Class propertires table (Event property); ScWaitCondition - lock run flow until simple event emits and specified conditional check returns true. Another words, this works like an ScWait , but returns to run flow if special condition function returns true. Condition function receive 3 parameters (see ScEvent for more details about them); ScWaitConstruction - wait object, that wait until specified construction would be appeared in a memory. (Not implemented yet) There are some examples of usage for specified ScWait objects: Wait input edge into addr ScWait < ScEventAddInputEdge > waiter ( ctx , addr ); waiter . Wait (); Wait input edge into addr, with condition auto check = []( ScAddr const & listenAddr , ScAddr const & edgeAddr , ScAddr const & otherAddr ) { ... // check condition there return false ; // return true or false depending on condition }; ScWaitCondition < ScEventAddInputEdge > waiter ( ctx , addr , SC_WAIT_CHECK ( check )); waiter . Wait (); There are some preimplemented most common waiters: * ScWaitActionFinished - wait until specified command will be finished. Example: ... ScWaitActionFinished waiter ( ctx , commandAddr ); waiter . Wait (); ...","title":"Agents"},{"location":"cpp/kpm/#scmodule","text":"Module - is a dynamic library. That implement specified module class. To create module you need to do next steps: Create directory for you module in sc-kpm. For example: sc-kpm/nl ; Go to created directory; Create file CMakeLists.txt with content (replace nl (module name) to yours one: CMakeLists.txt set ( SC_IOT_SRC ${ CMAKE_CURRENT_LIST_DIR } ) set ( SOURCES \"nl.cpp\" ) set ( HEADERS \"nl.hpp\" ) include_directories ( ${ SC_IOT_SRC } ${ SC_MEMORY_SRC } ) add_library ( nl SHARED ${ SOURCES } ${ HEADERS } ) add_dependencies ( nl sc-memory-cpp ) target_link_libraries ( nl sc-memory-cpp ) sc_codegen ( nl ${ SC_IOT_SRC } ) After that you need to create two files (cpp, hpp): nl.hpp #pragma once #include <sc-memory/cpp/sc_module.hpp> #include \"nl.generated.hpp\" class nlModule : public ScModule { SC_CLASS ( LoadOrder ( 11 )) SC_GENERATED_BODY () virtual sc_result InitializeImpl () override ; virtual sc_result ShutdownImpl () override ; }; nl.cpp #include \"nl.hpp\" SC_IMPLEMENT_MODULE ( nlModule ) sc_result nlModule :: InitializeImpl () { return SC_RESULT_OK ; } sc_result nlModule :: ShutdownImpl () { return SC_RESULT_OK ; }","title":"ScModule"},{"location":"cpp/kpm/#scagent","text":"To create sc-agent implementation you need: create source and header file for sc-agent implementation add created files into CMakeLists.txt CMakeLists.txt ... set ( SOURCES \"nl.cpp\" \"nlApiAi.cpp\" ) set ( HEADERS \"nl.hpp\" \"nlApiAi.hpp\" ) ... nlApiAi.hpp #pragma once #include \"wrap/kpm/sc_agent.hpp\" #include \"nlApiAi.generated.hpp\" namespace nl { class AApiAiParseUserTextAgent : public ScAgentAction { SC_CLASS ( Agent , CmdClass ( \"command_process_user_text_message\" )) SC_GENERATED_BODY () }; } nlApiAi.cpp #include \"nlApiAi.hpp\" namespace nl { SC_AGENT_ACTION_IMPLEMENTATION ( AApiAiParseUserTextAgent ) { // implement agent logic there return SC_RESULT_ERROR ; } } SC_AGENT_ACTION_IMPLEMENTATION - is a macros that insert generated code an minimize work. You just insert this one (with class name as parameter), and implement it like a function. During implementation you can use such variables: * requestAddr - ScAddr of command (action) instance that was initiated; * resultAddr - ScAddr of sc-structure that designate command (action) result; * mMemoryCtx - memory context that can be used to work with ScMemory . If sc-agent finished work without any errors, then it must return SC_RESULT_OK , otherwise - one of code error SC_RESULT_ERROR_... . Result of agent will be automaticaly added into specified set: Possible result sets: sc_result_error - unknown error; sc_result_ok - no any errors (successfull finish); sc_result_error_invalid_params - invalid parameters of agent; sc_result_error_invalid_type - invalid type error (invalid type of data of something else); sc_result_error_io - input/output error (can't read/write something from/to any source); sc_result_invalid_state - invalid state of processing data; sc_result_error_not_found - something wasn't found (for example: can't resolve element by identifier); sc_result_error_no_write_rights - agent hasn't rights to write something; sc_result_error_no_read_rights - agent hans't rights to read something. It's important: All sc-agents class names must to be started with A symbol; You can implement more than one ScAgent class in on source/header file; Don't use any other memory contexts instead of mMemoryCtx in ScAgent implementation; You need always include <you_header>.generated.hpp file into your header, if you have any metadata. This include must be a last one in a file.","title":"ScAgent"},{"location":"cpp/kpm/#scevent","text":"This type of objects allows you to subscribe to any events in ScMemory . There are c++ classes that correspond to specified event types: ScEventAddOutputEdge - emits each time, when output (outgoing) edge (from specified element) added; ScEventAddInputEdge - emits each time, when input (ingoing) edge (into specified element) added; ScEventRemoveOutputEdge - emits each time, when output (outgoing) edge (from specified element) removed; ScEventRemoveInputEdge - emits each time, when input (ingoing) edge (into specified element) removed; ScEventEraseElement - emits, when specified element removed; ScEventContentChanged - emits each time, when content of specified sc-link changed. Each event constructor takes 3 parameters: ctx - ScMemoryContext that will be used to work with event; addr - ScAddr of element that need to be listen for a specified event; func - delegate to a callback function, that will be called on each event emit ( bool func(ScAddr const & listenAddr, ScAddr const & edgeAddr, ScAddr const & otherAddr) ). Description of parameters for this function you can see in table below (for each event type). Note: callback function will be called in another thread! Table of description (parameters of callback function named on pictures, if there are no parameter name on picture, then it's would have an empty value): Class Description ScEventAddOutputEdge Callback calls each time, when any type edge edgeAddr between listenAddr and otherAddr create. Example C++ code : auto const callback { // listenAddr - ScAddr of source element // (listen it in event) // edgeAddr - ScAddr of added output edge // otherAddr - target element of added edge ... return true; // if failed, then return false }; ScEventAddOutputEdge evt(ctx, addr, callback); ScEventAddInputEdge Callback calls each time, when any type edge edgeAddr between otherAddr and listenAddr create. Example C++ code : auto const callback { // listenAddr - ScAddr of target element // (listen it in event) // edgeAddr - ScAddr of added input edge // otherAddr - source element of added edge ... return true; // if failed, then return false }; ScEventAddInputEdge evt(ctx, addr, callback); ScEventRemoveOutputEdge Callback calls each time, when any type edge edgeAddr between listenAddr and any element otherAddr erase. Example C++ code : auto const callback { // listenAddr - ScAddr of source element // (listen it in event) // edgeAddr - ScAddr of erased output edge // otherAddr - target element of erased edge ... return true; // if failed, then return false }; ScEventRemoveOutputEdge evt(ctx, addr, callback); ScEventRemoveInputEdge Callback calls each time, when any type edge edgeAddr between any element otherAddr and listenAddr erase. Example C++ code : auto const callback { // listenAddr - ScAddr of target element // (listen it in event) // edgeAddr - ScAddr of erased input edge // otherAddr - source element of erased edge ... return true; // if failed, then return false }; ScEventRemoveOutputEdge evt(ctx, addr, callback); ScEventEraseElement Callback calls when listenAddr erased. Example C++ code : auto const callback { // listenAddr - ScAddr of erased element // (listen it in event) // edgeAddr - empty // otherAddr - empty ... return true; // if failed, then return false }; ScEventEraseElement evt(ctx, addr, callback); ScEventContentChanged Callback calls when content of listenAddr changed. Example C++ code : auto const callback { // listenAddr - ScAddr of element that has // content changed (listen it in event) // edgeAddr - empty // otherAddr - empty ... return true; // if failed, then return false }; ScEventContentChanged evt(ctx, addr, callback);","title":"ScEvent"},{"location":"cpp/kpm/#scwait","text":"This type of objects used to wait until some event emits. It usually used, when on of an ScAgent want to wait result of another one. There are next kind of ScWait objects: ScWait - lock run flow until simple event emits. You can see the list of this events in the Class propertires table (Event property); ScWaitCondition - lock run flow until simple event emits and specified conditional check returns true. Another words, this works like an ScWait , but returns to run flow if special condition function returns true. Condition function receive 3 parameters (see ScEvent for more details about them); ScWaitConstruction - wait object, that wait until specified construction would be appeared in a memory. (Not implemented yet) There are some examples of usage for specified ScWait objects: Wait input edge into addr ScWait < ScEventAddInputEdge > waiter ( ctx , addr ); waiter . Wait (); Wait input edge into addr, with condition auto check = []( ScAddr const & listenAddr , ScAddr const & edgeAddr , ScAddr const & otherAddr ) { ... // check condition there return false ; // return true or false depending on condition }; ScWaitCondition < ScEventAddInputEdge > waiter ( ctx , addr , SC_WAIT_CHECK ( check )); waiter . Wait (); There are some preimplemented most common waiters: * ScWaitActionFinished - wait until specified command will be finished. Example: ... ScWaitActionFinished waiter ( ctx , commandAddr ); waiter . Wait (); ...","title":"ScWait"},{"location":"cpp/templates/","text":"Templates is a very powerful mechanism to work with semantic network (graph). You can search and generate any constructions using templates. There are list of available classes to work with templates: * ScTemplate - class that represents template in C++ code; * ScTemplateGenParams - parameters that contains values of variables in template. This class usually used when you generate construction by template; * ScTemplateSearchResult - contains result of search by template (list of found constructions); * ScTemplateSearchResultItem - represents on search result item; * ScTemplateGenResult - represent result of generation by template. ScTemplate Class to work with templates in c++. Before reading this paragraph you need to read common information about types . Let use f symbols for constant parameter of template. Let use a symbol for a variable parameter of template. Then template to search all output edges from specified sc-element will be a triple: * where first element is known f ; * second and third elements need to be found a . There are possible 3 types of simple templates: * f_a_a - template to find all outgoing edges from a specified sc-element; * f_a_f - template to find all edges between two specified sc-elements; * a_a_f - template to find all ingoing edges to a specified sc-element. There are some methods available for ScTemplate class: * triple - method that adds triple construction into template. There are some examples of using this function to produce simple templates: Template Description f_a_a Graphical representation Equal C++ code ScTemplate templ; templ.Triple( param1, ScType::EDGE_ACCESS_VAR_POS_PERM, ScType::NODE_VAR ); This triple template using to traverse output edges from specified sc-element. There param1 is a known ScAddr of sc-element. It must be a valid (use ScAddr::IsValid method to check). Where _param2 and _param3 are ScType for compare by search engine. When search engine will traverse output edges from param1 . Construction will be added into traverse result, where output edge from param1 , will suitable to specified type _param2 , and type of target element of this edge will be sutable for a type _param3 . You can use any type of _param3 (including edges) depending on construction you want to find. But _param2 should be any type of variable edge. f_a_f Graphical representation Equal C++ code ScTemplate templ; templ.Triple( param1, ScType::EDGE_ACCESS_VAR_POS_PERM, param3 ); This triple template using to find edge between param1 and param3 . There are param1 and param3 a known ScAddr of sc-elements. Edge type _param2 should be variable. a_a_f Graphical representation Equal C++ code ScTemplate templ; templ.Triple( ScType::NODE_VAR, ScType::EDGE_ACCESS_VAR_POS_PERM, param3 ); This triple template using to traverse input edges from specified sc-element. There param3 is a known ScAddr of sc-element. You can use any type of _param1 (including edges) depending on construction you want to find. But _param2 should be any type of variable edge. When template search engine works, it tries to traverse graph by simple (triple) template in order they specified. For example we need to check if specified sc-element ( _device ) is included into device set and device_enabled set: Code that generates equal template ScAddr device_addr , device_enabled_addr ; ... ScTemplate templ ; templ . Triple ( device_addr , // sc-addr of device node ScType :: EDGE_ACCESS_VAR_POS_PERM , ScType :: NODE_VAR >> \"_device_instance\" ); templ . Triple ( device_enabled_addr , // sc-addr of device_enabled node ScType :: EDGE_ACCESS_VAR_POS_PERM , \"_device_instance\" ); In code you can see a construction ScType::NODE_VAR >> \"_device_instance\" - this is a naming for a template element. It allows to set name for a specified sc-element in template, and use it many times in different triples. You can see, that in the second triple we use this name \"_device_instance\" . That means, that we need to place search result from a first triple into the second. So the second triple is a f_a_f style triple. So if you want to use the same element _x in different triples, and you doesn't know it ScAddr , then just use two main rules: * set name of this element in a first occurrence of this element in template triples. You need to use >> operator to do this (see code below, last element of first triple); * when you need to use named element in next triples, then just use it name instread of ScType or ScAddr (see code below, first element if second triple). Example code with naming ScTemplateTempl ; templ . Triple ( any_addr , // sc-addr of known sc-element ScType :: EDGE_ACCESS_VAR_POS_PERM , // type of unknown edge ScType :: NODE_VAR >> \"_x\" // type and name for an unknown sc-element ); templ . Triple ( \"_x\" , // say that is the same element as the last on in a previous triple ScType :: EDGE_ACCESS_VAR_POS_PERM , // type of unknown edge ScType :: NODE_VAR // type of unknown sc-element ); Also you can generate templates using SCs-code . Example code: ScTemplate templ ; char const * data = \"_device_instance\" \" _<- device;\" \" _<- device_enabled;;\" ; ctx . HelperBuildTemplate ( templ , data ); During template building all constants will be resolved by their system identifier (in example: device , device_enabled ), so in result templ will be contain template: Search Search algorithm trying to find all possible variants of specified construction. It use any constants (available ScAddr 's from parameters to find equal constructions in sc-memory). Search in construction Do the same as Search , but check if all elements of found constructions are in a specified set. Example: ScTemplate templ ; templ . Triple ( anyAddr >> \"_anyAddr\" , ScType :: EdgeAccessVarPosPerm >> \"_edge\" , ScType :: NodeVar >> \"_trgAddr\" ); ctx . HelperSearchTemplateInStruct ( templ , anyStructAddr , result ) Generate","title":"Template"},{"location":"cpp/templates/#sctemplate","text":"Class to work with templates in c++. Before reading this paragraph you need to read common information about types . Let use f symbols for constant parameter of template. Let use a symbol for a variable parameter of template. Then template to search all output edges from specified sc-element will be a triple: * where first element is known f ; * second and third elements need to be found a . There are possible 3 types of simple templates: * f_a_a - template to find all outgoing edges from a specified sc-element; * f_a_f - template to find all edges between two specified sc-elements; * a_a_f - template to find all ingoing edges to a specified sc-element. There are some methods available for ScTemplate class: * triple - method that adds triple construction into template. There are some examples of using this function to produce simple templates: Template Description f_a_a Graphical representation Equal C++ code ScTemplate templ; templ.Triple( param1, ScType::EDGE_ACCESS_VAR_POS_PERM, ScType::NODE_VAR ); This triple template using to traverse output edges from specified sc-element. There param1 is a known ScAddr of sc-element. It must be a valid (use ScAddr::IsValid method to check). Where _param2 and _param3 are ScType for compare by search engine. When search engine will traverse output edges from param1 . Construction will be added into traverse result, where output edge from param1 , will suitable to specified type _param2 , and type of target element of this edge will be sutable for a type _param3 . You can use any type of _param3 (including edges) depending on construction you want to find. But _param2 should be any type of variable edge. f_a_f Graphical representation Equal C++ code ScTemplate templ; templ.Triple( param1, ScType::EDGE_ACCESS_VAR_POS_PERM, param3 ); This triple template using to find edge between param1 and param3 . There are param1 and param3 a known ScAddr of sc-elements. Edge type _param2 should be variable. a_a_f Graphical representation Equal C++ code ScTemplate templ; templ.Triple( ScType::NODE_VAR, ScType::EDGE_ACCESS_VAR_POS_PERM, param3 ); This triple template using to traverse input edges from specified sc-element. There param3 is a known ScAddr of sc-element. You can use any type of _param1 (including edges) depending on construction you want to find. But _param2 should be any type of variable edge. When template search engine works, it tries to traverse graph by simple (triple) template in order they specified. For example we need to check if specified sc-element ( _device ) is included into device set and device_enabled set: Code that generates equal template ScAddr device_addr , device_enabled_addr ; ... ScTemplate templ ; templ . Triple ( device_addr , // sc-addr of device node ScType :: EDGE_ACCESS_VAR_POS_PERM , ScType :: NODE_VAR >> \"_device_instance\" ); templ . Triple ( device_enabled_addr , // sc-addr of device_enabled node ScType :: EDGE_ACCESS_VAR_POS_PERM , \"_device_instance\" ); In code you can see a construction ScType::NODE_VAR >> \"_device_instance\" - this is a naming for a template element. It allows to set name for a specified sc-element in template, and use it many times in different triples. You can see, that in the second triple we use this name \"_device_instance\" . That means, that we need to place search result from a first triple into the second. So the second triple is a f_a_f style triple. So if you want to use the same element _x in different triples, and you doesn't know it ScAddr , then just use two main rules: * set name of this element in a first occurrence of this element in template triples. You need to use >> operator to do this (see code below, last element of first triple); * when you need to use named element in next triples, then just use it name instread of ScType or ScAddr (see code below, first element if second triple). Example code with naming ScTemplateTempl ; templ . Triple ( any_addr , // sc-addr of known sc-element ScType :: EDGE_ACCESS_VAR_POS_PERM , // type of unknown edge ScType :: NODE_VAR >> \"_x\" // type and name for an unknown sc-element ); templ . Triple ( \"_x\" , // say that is the same element as the last on in a previous triple ScType :: EDGE_ACCESS_VAR_POS_PERM , // type of unknown edge ScType :: NODE_VAR // type of unknown sc-element ); Also you can generate templates using SCs-code . Example code: ScTemplate templ ; char const * data = \"_device_instance\" \" _<- device;\" \" _<- device_enabled;;\" ; ctx . HelperBuildTemplate ( templ , data ); During template building all constants will be resolved by their system identifier (in example: device , device_enabled ), so in result templ will be contain template:","title":"ScTemplate"},{"location":"cpp/templates/#search","text":"Search algorithm trying to find all possible variants of specified construction. It use any constants (available ScAddr 's from parameters to find equal constructions in sc-memory).","title":"Search"},{"location":"cpp/templates/#search-in-construction","text":"Do the same as Search , but check if all elements of found constructions are in a specified set. Example: ScTemplate templ ; templ . Triple ( anyAddr >> \"_anyAddr\" , ScType :: EdgeAccessVarPosPerm >> \"_edge\" , ScType :: NodeVar >> \"_trgAddr\" ); ctx . HelperSearchTemplateInStruct ( templ , anyStructAddr , result )","title":"Search in construction"},{"location":"cpp/templates/#generate","text":"","title":"Generate"},{"location":"dev/codestyle/","text":"C++ Style Guide In general, Google's coding standard is used, and we strongly encourage to read it. Below are our specific (but not all!) exceptions to the Google's coding standard: All code should conform to C++11 standard We use .cpp and .hpp files, not .cc and .h ( .c and .h are used for C code), in UTF-8 encoding. File names are lowercase with underscores, like sc_memory.cpp . We use #pragma once instead of the #define Guard in header files. Includes are sorted and grouped by directory, there should be newlines between different directories. Order of directories in includes: \"current_dir/current_file.hpp\", other includes from the same dir, includes from other dirs sorted by name. #include \"../test.hpp\" #include \"hash/hmac.h\" #include \"hash/sha256.h\" #include \"sc-memory/cpp/sc_wait.hpp\" #include \"sc-memory/cpp/kpm/sc_agent.hpp\" #include <curl/curl.h> #include <rapidjson/document.h> #include <rapidjson/stringbuffer.h> #include <rapidjson/writer.h> We ARE using C++ exceptions. We are using all features of C++11. Naming and formatting We ALWAYS use two spaces indent and don't use tabs. If you see old formated file, then change format of it in separated commit. We don't have hardcoded line width, but keep it reasonable to fit on the screen. Doxygen-style comments can be used. Underscores are allowed only in prefixes for member variables and namespace names, like int m_keynodeAddr; namespace sc_utils . Don't use using namespace std or other namepsaces globaly. You can use them localy in test cpp files or functions. Use right-to-left order for variables/params: ScAddr const & addr (reference to the const ScAddr ). In one line if , for , while we do not use brackets. If one line for or while is combined with one line if , do use brackets for cycle. for ( ScAddr const & addr : listOfAddr ) ctx . EraseElement ( addr ); ... for ( ScAddr const & addr : listOfAddr ) { if ( addr . IsValid ()) return true ; } Space after the keyword in conditions and loops. Space after ; in for loop. Space between binary operators: x = y * y + z * z . Space after double dash x = isValid ? 2 : 1; . We use using keyword instead of typedef . Compile-time constants must be named in camelCase, starting with a lower-case k , e.g. kCompileTimeConstant and marked as constexpr when possible. Values of enum classes must be named in CamelCase, e.g. enum class Color { Red, Green, LightBlue }; . Macros and C-style enums must be named in UPPER_CASE, and enum values must be prefixed with a capitalized enum name. Note that macros complicate debugging, and old-style enums have dangerous implicit conversions to integers, and tend to clutter containing namespaces. Avoid them when possible - use const or constexpr instead of macros, and enum classes instead of enums. Code should compile without warnings!. Just deprecated warning could be present for a short time. But if you see them, then try to fix it in a separate commit ClangFormat Most of our coding style is specified in a configuration file for ClangFormat . To automatically format a file, install clang-format and run: clang-format -i file.cpp file.hpp other_file.cpp Formatting Example/Guide/Reference #pragma once #include \"sc_addr.hpp\" uint16_t constexpr kBufferSize = 255 ; // C-style enums are ALL_CAPS. But remember that C++11 enum classes are preferred. enum Type { TYPE_INTEGER , TYPE_FLOAT , TYPE_STRING }; using TMyTypeStartsWithCapitalTLetter = double ; class ComplexClass { public : Complex ( double rePart , double imPart ) : m_re ( rePart ), m_im ( imPart ) {} double Modulus () const { double const rere = m_re * m_re ; double const imim = m_im * m_im ; return sqrt ( rere + imim ); } double OneLineMethod () const { return m_re ; } private : // We use m_ prefix for member variables. double m_re ; double m_im ; }; namespace { void CamelCaseFunctionName ( int lowerCamelCaseVar ) { static int counter = 0 ; counter += lowerCamelCaseVar ; } } // namespace namespace lower_case { template < class TTemplateTypeStartsWithCapitalTLetter > void SomeFoo ( int a , int b , TTemplateTypeStartsWithCapitalTLetter /* We avoid compilation warnings. */ ) { for ( int i = 0 ; i < a ; ++ i ) { // IMPORTANT! We DON'T use one-liners for if statements for easier debugging. // The following syntax is invalid: if (i < b) Bar(i); if ( i < b ) Bar ( i ); else { Bar ( i ); Bar ( b ); // Commented out the call. // Bar(c); } } } } // namespace lower_case // Switch formatting. int Foo ( int a ) { switch ( a ) { case 1 : Bar ( 1 ); break ; case 2 : { Bar ( 2 ); break ; } case 3 : default : Bar ( 3 ); break ; } return 0 ; } // Loops formatting. if ( condition ) foo (); else bar (); if ( condition ) { if ( condition ) foo (); else bar (); } for ( size_t i = 0 ; i < size ; ++ i ) foo ( i ); while ( true ) { if ( condition ) break ; } // Space after the keyword. if ( condition ) { } for ( size_t i = 0 ; i < 5 ; ++ i ) { } while ( condition ) { } switch ( i ) { } // Space between operators, and don't use space between unary operator and expression. x = 0 ; x = - 5 ; ++ x ; x -- ; x *= 5 ; if ( x && ! y ) { } v = w * x + y / z ; v = w * ( x + z ); // Space after double dash. And full sentences in comments. Tips and Hints If you see outdated code which can be improved - DO IT NOW (but in the separate pull request). Your code should work at least on [mac|win|linux][x86|x86_64] [android|ios] platforms. Your code should compile well with gcc 4.8+ and clang 3.5+ Try to avoid using any new 3party library if it is not fully tested and supported on supported platforms. Cover your code with unit tests. If you don't have enough time to make it right, leave a // TODO(DeveloperName): need to fix it comment. Some useful macros: macroses to check compilation platform #if SC_IS_PLATFORM_WIN32 // windows platform #endif #if SC_IS_PLATFORM_LINUX // linux platform #endif #if SC_IS_PLATFORM_MAC // OSX (mac) platform #endif #if SC_IS_PLATFORM_IOS // iOS platform #endif #if SC_IS_PLATFORM_ANDROID // android platform #endif - Check code in runtime for Debug builds: SC_ASSERT ( expr , ( \"message\" )); SC_ASSERT ( expr , ()); // no message Check if code compiles in Debug mode: #if SC_DEBUG_MODE // compiles in debug #endif Check code in runtime for any type of build. Prefer SC_CHECK_... to SC_CHECK : SC_CHECK ( expr , ( \"message\" )); SC_CHECK ( expr , ()); // no message SC_CHECK_NOT ( expr , ()); // equal to SC_CHECK(!expr, ()); SC_CHECK_EQUAL ( a , b , ()); // equal to SC_CHECK(a == b, ()); SC_CHECK_NOT_EQUAL ( a , b , ()); // equal to SC_CHECK(a != b, ()); SC_CHECK_GREAT ( a , b , ()); // equal to SC_CHECK(a > b, ()); SC_CHECK_GREAT_EQ ( a , b , ()); // equal to SC_CHECK(a >= b, ()); SC_CHECK_LESS ( a , b , ()); // equal to SC_CHECK(a < b, ()); SC_CHECK_LESS_EQ ( a , b , ()); // equal to SC_CHECK(a <= b, ()); Logging: SC_LOG_DEBUG(msg) - print message in Debug builds. Prefix: [Debug] SC_LOG_INFO(msg) SC_LOG_WARNING(msg) SC_LOG_ERROR(msg) SC_LOG_INFO_COLOR(msg, color) - print colored info message. Look color constants in ScConsole::Color Declare your own exceptions: class MyException final : public ScException { public : explicit MyException ( std :: string const & msg ) : ScException ( \"My: \" + msg ) {} }; - Throw exceptions with SC_THROW_EXCEPTION(exceptionName, message) : SC_THROW_EXCEPTION ( MyException , \"my message\" ) Exception for a non implemented parts of code SC_NOT_IMPLEMENTED ( \"message\" )","title":"Codestyle"},{"location":"dev/codestyle/#c-style-guide","text":"In general, Google's coding standard is used, and we strongly encourage to read it. Below are our specific (but not all!) exceptions to the Google's coding standard: All code should conform to C++11 standard We use .cpp and .hpp files, not .cc and .h ( .c and .h are used for C code), in UTF-8 encoding. File names are lowercase with underscores, like sc_memory.cpp . We use #pragma once instead of the #define Guard in header files. Includes are sorted and grouped by directory, there should be newlines between different directories. Order of directories in includes: \"current_dir/current_file.hpp\", other includes from the same dir, includes from other dirs sorted by name. #include \"../test.hpp\" #include \"hash/hmac.h\" #include \"hash/sha256.h\" #include \"sc-memory/cpp/sc_wait.hpp\" #include \"sc-memory/cpp/kpm/sc_agent.hpp\" #include <curl/curl.h> #include <rapidjson/document.h> #include <rapidjson/stringbuffer.h> #include <rapidjson/writer.h> We ARE using C++ exceptions. We are using all features of C++11. Naming and formatting We ALWAYS use two spaces indent and don't use tabs. If you see old formated file, then change format of it in separated commit. We don't have hardcoded line width, but keep it reasonable to fit on the screen. Doxygen-style comments can be used. Underscores are allowed only in prefixes for member variables and namespace names, like int m_keynodeAddr; namespace sc_utils . Don't use using namespace std or other namepsaces globaly. You can use them localy in test cpp files or functions. Use right-to-left order for variables/params: ScAddr const & addr (reference to the const ScAddr ). In one line if , for , while we do not use brackets. If one line for or while is combined with one line if , do use brackets for cycle. for ( ScAddr const & addr : listOfAddr ) ctx . EraseElement ( addr ); ... for ( ScAddr const & addr : listOfAddr ) { if ( addr . IsValid ()) return true ; } Space after the keyword in conditions and loops. Space after ; in for loop. Space between binary operators: x = y * y + z * z . Space after double dash x = isValid ? 2 : 1; . We use using keyword instead of typedef . Compile-time constants must be named in camelCase, starting with a lower-case k , e.g. kCompileTimeConstant and marked as constexpr when possible. Values of enum classes must be named in CamelCase, e.g. enum class Color { Red, Green, LightBlue }; . Macros and C-style enums must be named in UPPER_CASE, and enum values must be prefixed with a capitalized enum name. Note that macros complicate debugging, and old-style enums have dangerous implicit conversions to integers, and tend to clutter containing namespaces. Avoid them when possible - use const or constexpr instead of macros, and enum classes instead of enums. Code should compile without warnings!. Just deprecated warning could be present for a short time. But if you see them, then try to fix it in a separate commit","title":"C++ Style Guide"},{"location":"dev/codestyle/#clangformat","text":"Most of our coding style is specified in a configuration file for ClangFormat . To automatically format a file, install clang-format and run: clang-format -i file.cpp file.hpp other_file.cpp","title":"ClangFormat"},{"location":"dev/codestyle/#formatting-exampleguidereference","text":"#pragma once #include \"sc_addr.hpp\" uint16_t constexpr kBufferSize = 255 ; // C-style enums are ALL_CAPS. But remember that C++11 enum classes are preferred. enum Type { TYPE_INTEGER , TYPE_FLOAT , TYPE_STRING }; using TMyTypeStartsWithCapitalTLetter = double ; class ComplexClass { public : Complex ( double rePart , double imPart ) : m_re ( rePart ), m_im ( imPart ) {} double Modulus () const { double const rere = m_re * m_re ; double const imim = m_im * m_im ; return sqrt ( rere + imim ); } double OneLineMethod () const { return m_re ; } private : // We use m_ prefix for member variables. double m_re ; double m_im ; }; namespace { void CamelCaseFunctionName ( int lowerCamelCaseVar ) { static int counter = 0 ; counter += lowerCamelCaseVar ; } } // namespace namespace lower_case { template < class TTemplateTypeStartsWithCapitalTLetter > void SomeFoo ( int a , int b , TTemplateTypeStartsWithCapitalTLetter /* We avoid compilation warnings. */ ) { for ( int i = 0 ; i < a ; ++ i ) { // IMPORTANT! We DON'T use one-liners for if statements for easier debugging. // The following syntax is invalid: if (i < b) Bar(i); if ( i < b ) Bar ( i ); else { Bar ( i ); Bar ( b ); // Commented out the call. // Bar(c); } } } } // namespace lower_case // Switch formatting. int Foo ( int a ) { switch ( a ) { case 1 : Bar ( 1 ); break ; case 2 : { Bar ( 2 ); break ; } case 3 : default : Bar ( 3 ); break ; } return 0 ; } // Loops formatting. if ( condition ) foo (); else bar (); if ( condition ) { if ( condition ) foo (); else bar (); } for ( size_t i = 0 ; i < size ; ++ i ) foo ( i ); while ( true ) { if ( condition ) break ; } // Space after the keyword. if ( condition ) { } for ( size_t i = 0 ; i < 5 ; ++ i ) { } while ( condition ) { } switch ( i ) { } // Space between operators, and don't use space between unary operator and expression. x = 0 ; x = - 5 ; ++ x ; x -- ; x *= 5 ; if ( x && ! y ) { } v = w * x + y / z ; v = w * ( x + z ); // Space after double dash. And full sentences in comments.","title":"Formatting Example/Guide/Reference"},{"location":"dev/codestyle/#tips-and-hints","text":"If you see outdated code which can be improved - DO IT NOW (but in the separate pull request). Your code should work at least on [mac|win|linux][x86|x86_64] [android|ios] platforms. Your code should compile well with gcc 4.8+ and clang 3.5+ Try to avoid using any new 3party library if it is not fully tested and supported on supported platforms. Cover your code with unit tests. If you don't have enough time to make it right, leave a // TODO(DeveloperName): need to fix it comment.","title":"Tips and Hints"},{"location":"dev/codestyle/#some-useful-macros","text":"macroses to check compilation platform #if SC_IS_PLATFORM_WIN32 // windows platform #endif #if SC_IS_PLATFORM_LINUX // linux platform #endif #if SC_IS_PLATFORM_MAC // OSX (mac) platform #endif #if SC_IS_PLATFORM_IOS // iOS platform #endif #if SC_IS_PLATFORM_ANDROID // android platform #endif - Check code in runtime for Debug builds: SC_ASSERT ( expr , ( \"message\" )); SC_ASSERT ( expr , ()); // no message Check if code compiles in Debug mode: #if SC_DEBUG_MODE // compiles in debug #endif Check code in runtime for any type of build. Prefer SC_CHECK_... to SC_CHECK : SC_CHECK ( expr , ( \"message\" )); SC_CHECK ( expr , ()); // no message SC_CHECK_NOT ( expr , ()); // equal to SC_CHECK(!expr, ()); SC_CHECK_EQUAL ( a , b , ()); // equal to SC_CHECK(a == b, ()); SC_CHECK_NOT_EQUAL ( a , b , ()); // equal to SC_CHECK(a != b, ()); SC_CHECK_GREAT ( a , b , ()); // equal to SC_CHECK(a > b, ()); SC_CHECK_GREAT_EQ ( a , b , ()); // equal to SC_CHECK(a >= b, ()); SC_CHECK_LESS ( a , b , ()); // equal to SC_CHECK(a < b, ()); SC_CHECK_LESS_EQ ( a , b , ()); // equal to SC_CHECK(a <= b, ()); Logging: SC_LOG_DEBUG(msg) - print message in Debug builds. Prefix: [Debug] SC_LOG_INFO(msg) SC_LOG_WARNING(msg) SC_LOG_ERROR(msg) SC_LOG_INFO_COLOR(msg, color) - print colored info message. Look color constants in ScConsole::Color Declare your own exceptions: class MyException final : public ScException { public : explicit MyException ( std :: string const & msg ) : ScException ( \"My: \" + msg ) {} }; - Throw exceptions with SC_THROW_EXCEPTION(exceptionName, message) : SC_THROW_EXCEPTION ( MyException , \"my message\" ) Exception for a non implemented parts of code SC_NOT_IMPLEMENTED ( \"message\" )","title":"Some useful macros:"},{"location":"dev/git-workflow/","text":"Initialize To initialize your repo do: * make fork from https://github.com/ostis-dev/sc-machine * clone your fork to your machine and prepare git clone git@github.com:yourlogin/sc-machine.git cd sc-machine git config --global user.name \"Your Name\" git config --global user.email youremail@example.com git remote add upstream git@github.com:ostis-dev/sc-machine.git Update To update your master from upstream use: git fetch upstream git checkout master git merge upstream/master git push origin master Rebase To rebase your branch to master: git checkout yourbranch git rebase master If you have any problems, then: * redo git rebase --abort * ask in Common rules use git rebase instead of merge . More documentation about this command This command just try to apply your commits (from current branch to commits in specified branch)","title":"Git-workflow"},{"location":"dev/git-workflow/#initialize","text":"To initialize your repo do: * make fork from https://github.com/ostis-dev/sc-machine * clone your fork to your machine and prepare git clone git@github.com:yourlogin/sc-machine.git cd sc-machine git config --global user.name \"Your Name\" git config --global user.email youremail@example.com git remote add upstream git@github.com:ostis-dev/sc-machine.git","title":"Initialize"},{"location":"dev/git-workflow/#update","text":"To update your master from upstream use: git fetch upstream git checkout master git merge upstream/master git push origin master","title":"Update"},{"location":"dev/git-workflow/#rebase","text":"To rebase your branch to master: git checkout yourbranch git rebase master If you have any problems, then: * redo git rebase --abort * ask in","title":"Rebase"},{"location":"dev/git-workflow/#common-rules","text":"use git rebase instead of merge . More documentation about this command This command just try to apply your commits (from current branch to commits in specified branch)","title":"Common rules"},{"location":"dev/pr/","text":"This page describes rules to create Pull Requests. Commits Each commit message should be formed as: [tag1]...[tagN] Message text (#issue) Message text should start from an upper case letter. If commit doesn't fix or implement any #issue , then it shouldn't be pointed in commit message Examples: [cpp] Colored log output [cpp][test] Add unit test for ScEvent class [kpm][search] Relation type check added Possible tags: [cpp] - use, when you made changes in cpp wrapper code; [memory] - use, when you made changes in c core code; [tests] or [test] - use, when you made changes in tests; [tools] - use, when you made changes in tools; [builder] - use, when you made changes in builder tools; [codegen] - use, when you made changes in code generator; [review] - use, when you made commit with review fixes; [refactor] - use, when you made commit with some code refactoring; [changelog] - use, when you update changelog; [docs] - use, when you update documentation; [python] - use, when you made commit with python module changes. Each commit in Pull request should be an atomic. Another word implement or fix one feature. For example: Lat commit ... [cpp] Colored log output [cpp] Add class to work with console ... Init commit In this example we add class to work with console (where implemented colored output), then in another commit we had implementation of colored log output Each commit should have not much differences excluding cases, with: CodeStyle changes; Renames; Code formating; Do atomic commits for each changes. For example if you rename some members in ClassX and ClassY , then do two commits: [refactor] Rename members in ClassX according to codestyle [refactor] Rename members in ClassY according to codestyle Do not mix codestyle changes and any logical fixes in one commit All commit, that not applies to this rules, should be split by this rules. Another way they will be rejected with Pull request. Pull request Each pull request with many changes, that not possible to review (excluding codestyle, rename changes), will be rejected. For each pull request you should do: update docs/changelog.md file according to your commits ensure prepare updates for documentation cover new functionality by tests your code should be written according to a codestyle After prepare pull request an automation tests will run on it. If any test doesn't passed, then pull request couldn't be merged and you should to fix it. All review or other fixes to pull request should be appended as new commits to it","title":"Pull requets"},{"location":"dev/pr/#commits","text":"Each commit message should be formed as: [tag1]...[tagN] Message text (#issue) Message text should start from an upper case letter. If commit doesn't fix or implement any #issue , then it shouldn't be pointed in commit message Examples: [cpp] Colored log output [cpp][test] Add unit test for ScEvent class [kpm][search] Relation type check added Possible tags: [cpp] - use, when you made changes in cpp wrapper code; [memory] - use, when you made changes in c core code; [tests] or [test] - use, when you made changes in tests; [tools] - use, when you made changes in tools; [builder] - use, when you made changes in builder tools; [codegen] - use, when you made changes in code generator; [review] - use, when you made commit with review fixes; [refactor] - use, when you made commit with some code refactoring; [changelog] - use, when you update changelog; [docs] - use, when you update documentation; [python] - use, when you made commit with python module changes. Each commit in Pull request should be an atomic. Another word implement or fix one feature. For example: Lat commit ... [cpp] Colored log output [cpp] Add class to work with console ... Init commit In this example we add class to work with console (where implemented colored output), then in another commit we had implementation of colored log output Each commit should have not much differences excluding cases, with: CodeStyle changes; Renames; Code formating; Do atomic commits for each changes. For example if you rename some members in ClassX and ClassY , then do two commits: [refactor] Rename members in ClassX according to codestyle [refactor] Rename members in ClassY according to codestyle Do not mix codestyle changes and any logical fixes in one commit All commit, that not applies to this rules, should be split by this rules. Another way they will be rejected with Pull request.","title":"Commits"},{"location":"dev/pr/#pull-request","text":"Each pull request with many changes, that not possible to review (excluding codestyle, rename changes), will be rejected. For each pull request you should do: update docs/changelog.md file according to your commits ensure prepare updates for documentation cover new functionality by tests your code should be written according to a codestyle After prepare pull request an automation tests will run on it. If any test doesn't passed, then pull request couldn't be merged and you should to fix it. All review or other fixes to pull request should be appended as new commits to it","title":"Pull request"},{"location":"dev/test/","text":"Carete unit test To append new unit test, you should create file sc-memory/test/wrap/units/test_my.cpp with base content /* * This source file is part of an OSTIS project. For the latest info, see http://ostis.net * Distributed under the MIT License * (See accompanying file COPYING.MIT or copy at http://opensource.org/licenses/MIT) */ #include \"sc-memory/cpp/utils/sc_test.hpp\" UNIT_TEST ( my_test_name ) { ScMemoryContext ctx ( sc_access_lvl_make_min , \"my_test_name\" ); /* There you should implement your test logic. * Use SC_CHECK_.. functions for check test results */ SUBTEST_START ( my_subtest_name ) { /* There you can implement simple subtest. * For example check the same data, but with some another logic. */ } SUBTEST_END () SUBTEST_START ( my_subtest_name_2 ) { // You can implement as many as you want subtests } SUBTEST_END () } UNIT_TEST ( me_test_name_2 ) { // You can implement as many as you want tests } For example you can see any test in sc-memory/test/wrap/units/ folder. TODO: how to create automation tests for another project","title":"Unit tests"},{"location":"dev/test/#carete-unit-test","text":"To append new unit test, you should create file sc-memory/test/wrap/units/test_my.cpp with base content /* * This source file is part of an OSTIS project. For the latest info, see http://ostis.net * Distributed under the MIT License * (See accompanying file COPYING.MIT or copy at http://opensource.org/licenses/MIT) */ #include \"sc-memory/cpp/utils/sc_test.hpp\" UNIT_TEST ( my_test_name ) { ScMemoryContext ctx ( sc_access_lvl_make_min , \"my_test_name\" ); /* There you should implement your test logic. * Use SC_CHECK_.. functions for check test results */ SUBTEST_START ( my_subtest_name ) { /* There you can implement simple subtest. * For example check the same data, but with some another logic. */ } SUBTEST_END () SUBTEST_START ( my_subtest_name_2 ) { // You can implement as many as you want subtests } SUBTEST_END () } UNIT_TEST ( me_test_name_2 ) { // You can implement as many as you want tests } For example you can see any test in sc-memory/test/wrap/units/ folder. TODO: how to create automation tests for another project","title":"Carete unit test"},{"location":"http/","text":"HTTP service This service implement HTTP endpoint for knowledge base. It runs as an extension module of sc-memory. There are list of provided API's: WebSocket - websocket JSON based implementation of two side protocol, that allows to communicate with knowledge base in to directions. It allows to generate/get/search anything in KB. Also you should use it to subscribes to an events.","title":"Common"},{"location":"http/#http-service","text":"This service implement HTTP endpoint for knowledge base. It runs as an extension module of sc-memory. There are list of provided API's: WebSocket - websocket JSON based implementation of two side protocol, that allows to communicate with knowledge base in to directions. It allows to generate/get/search anything in KB. Also you should use it to subscribes to an events.","title":"HTTP service"},{"location":"http/websocket/","text":"WebSocket protocol It used to communicate with knowledge base by network from a browser. This protocol based is asynchronous and based on JSON. JSON used instead of binary data to prevent problems with different byte (bit) order on different platforms. ScAddr ScAddr encodes with ScAddr::Hash function Common Each request has a common structure: { \"id\" : 2 , \"type\" : \"request type\" , \"payload\" : { ... } } Where: id - unique id of command. Used to identify responses; payload - command specified data. Response also has a common structure: { \"id\" : 2 , \"status\" : true , \"event\" : false , // flag that mark if it is an emited event or not \"payload\" : { ... } } Where: id - id of command; status - has true value when command processed; otherwise has a false value; payload - command specified result data. Authentificate TODO Need to make documentation CreateElements Request type : create_elements With this command you can create a batch of elements. payload of this command contains list of element creation parameters (depend on element type). All of this parameters have common structure: { \"el\" : \"node\" , // type of element to create. Possible values: node, edge, link \"params\" : {} // parameters that depends on element type } There are parameters requested by elements type: node - to create node use parameters: { \"el\" : \"node\" , // type of element to create \"type\" : 342 // ScType value of node type } edge - to create edge use parameters: { \"el\" : \"edge\" , \"src\" : { // source element of edge \"type\" : \"addr\" , // use exist ScAddr of element \"value\" : 2313 // value of ScAddr }, \"trg\" : { // target element of edge \"type\" : \"ref\" , // reference to created element before this one \"value\" : 0 // index of element in CreateElement payload list }, \"type\" : 32 // ScType value of edge type } link - to create link use parameters: { \"el\" : \"link\" , \"type\" : 2 , // ScType value of link type (const or var) \"content\" : \"data\" , // content data of link \"content_type\" : \"string\" // content type : int , float, string, binary } Example // request { \"id\" : 3 , \"type\" : \"create_elements\" , \"payload\" : [ { \"el\" : \"node\" , \"type\" : 1 }, { \"el\" : \"link\" , \"type\" : 2 , \"content\" : 45.4 }, { \"el\" : \"edge\" , \"src\" : { \"type\" : \"ref\" , \"value\" : 0 }, \"trg\" : { \"type\" : \"ref\" , \"value\" : 1 }, \"type\" : 32 } ] } // response { \"id\" : 3 , \"status\" : true , \"payload\" : [ 323 , 534 , 342 ] } CheckElements Request type : check_elements With this command you can check if specified elements exist. So you should pass list of ScAddr to check, and this command will return list of each element type. If type is not valid, then element doesn't exist. See ScType for more information. Request { ..., // common request data \"type\" : \"check_elements\" , \"payload\" : [ // there are a list of ScAddr's to check 23123 , 432 , ... ] } Response { ..., // common response data \"payload\" : [ // there is a list of element types (ScType) 32 , // valid type 0 , // not valid type ... ] } DeleteElements Request type : delete_elements This request delete specified elements. Request { ..., // common request data \"type\" : \"delete_elements\" , \"payload\" : [ // there are a list of ScAddr's to delete 2323 , 4322 , ... ] } Response If command processed, then response status is true , otherwise status - false SearchByTemplate Request type : search_template This request search constructions by specified template. Request { ..., // common request data \"type\" : \"search_template\" , \"payload\" : [ // there are a list of template triples [ // triple that represents F_A_A template { \"type\" : \"addr\" , \"value\" : 23123 // ScAddr }, { \"type\" : \"type\" , \"value\" : 32 , // ScType (should be a variable type) \"alias\" : \"_edge1\" }, { \"type\" : \"type\" , \"value\" : 2 , // ScType (should be a variable type) \"alias\" : \"_trg\" // can be used in next triples to ref this element } ], [ { \"type\" : \"addr\" , \"value\" : 231342 }, { \"type\" : \"type\" , \"value\" : 2000 , \"alias\" : \"_edge2\" }, { \"type\" : \"alias\" , \"value\" : \"_edge1\" // ref to first triple element }, // last field is an options. You should to use it, when you need to override defaults { \"is_required\" : false } ], ... ] } There are decription options value for an each triple in template: is_required : default value is true . This option can be used to make triple optional in a search (use false value for that) Response { ..., // common response data \"payload\" : { /* this map contains index of specified alias in * result addrs list */ \"aliases\" : { \"trg\" : 2 , \"edge1\" : 1 , \"edge2\" : 4 }, \"addrs\" : [ [ 23123 , 412 , 423 , 231342 , 282 , 412 ], // addrs for 1 st result [ 23123 , 6734 , 85643 , 231342 , 4234 , 6734 ], // addrs for 2 nd result [ 23123 , 7256 , 252 , 0 , 0 , 0 ], // doens't found triple with is_required = false ... ] } } You can use SCs-text language to make a search requests. Just replace payload field with a string, that contains SCs-text . Each vairable identifier (start with _ symbol) will be used as an alias. All other should be a system identifiers, that will be used to find ScAddr of elements. Example : Request { ..., // common request data \"type\" : \"search_template\" , \"payload\" : \"person _-> .._p (* _=> nrel_email:: _[] *);;\" } GenerateByTemplate Request type : generate_template This request generate construction by specified template. Request { ..., // common request data \"type\" : \"generate_template\" , \"payload\" : { // there are a list of template triples \"templ\" : [ { \"params\" : [ // triple that represents F_A_A template { \"type\" : \"addr\" , \"value\" : 23123 // ScAddr }, { \"type\" : \"type\" , \"value\" : 32 , // ScType (should be a variable type) \"alias\" : \"_edge1\" }, { \"type\" : \"type\" , \"value\" : 2 , // ScType (should be a variable type) \"alias\" : \"_trg\" // can be used in next triples to ref this element } ] }, { \"params\" : [ { \"type\" : \"addr\" , \"value\" : 231342 }, { \"type\" : \"type\" , \"value\" : 2000 , \"alias\" : \"_edge2\" }, { \"type\" : \"alias\" , \"value\" : \"_edge1\" // ref to first triple element } ] }, ... ], /* Map of parameters. Each parameter with specified alias in this map. * Will be used in template generation. Just `type` values can be replaced * by params. Also you can't use alias in parameters for an edges. */ \"params\" : { \"_trg\" : 564 } } } Response { ..., // common response data \"payload\" : { /* This map contains index of ScAddr (in `addrs` field) for each alias from template. */ \"aliases\" : { \"_trg\" : 2 , \"_edge1\" : 1 , \"_edge2\" : 4 }, \"addrs\" : [ 23123 , 4953 , 564 , 231342 , 533 , 4953 ] } } Like in SearchByTemplate you can use SCs-template for generation. Just replace templ field of payload to do that. Example : { ..., // common request data \"type\" : \"generate_template\" , \"payload\" : { // there are a list of template triples \"templ\" : \"person _-> .._p (* _=> nrel_email:: _[test@email.com] *);;\" , /* Map of parameters. Each parameter with specified alias in this map. * Will be used in template generation. Just `type` values can be replaced * by params. Also you can't use alias in parameters for an edges. */ \"params\" : { \".._p\" : 5314 } } } Events Request type : events Request { ..., // common request data \"type\" : \"events\" , \"payload\" : { // there are a list of events to create \"create\" : [ { \"type\" : \"add_output_edge\" , // event type \"addr\" : 324 // element to subscribe events } ], // there are a list of events id's to delete \"delete\" : [ 2 , 4 , 5 ] } } List of possible event types: add_outgoing_edge - used to subscribe for events, when new outgoing edge added from a specified element; add_ingoing_edge - the same as add_outgoing_edge , but for ingoing edges; remove_outgoing_edge - used to subscribe for events, when outgoing edge removed from a specified element; remove_ingoing_edge - the same as remove_outgoing_edge , but for outgoing edges; content_change - used to subscribe for sc-link content changes event; delete_element - used to subscribe for element deletion. Response { ..., // common response data \"payload\" : [ /* List of created event id's. The same order (index) * as in request `create` list */ 2 , 3 , 7 ] } Events emit Each event can be emitted by server and passed to client. It has such structure: { \"id\" : 2 , \"event\" : \"true\" , // payload contains 1 or 3 elements \"payload\" : [ 32 , // ScAddr of subscribed element 324 , // added/removed edge ScAddr 34 // source/target of edge ] } 2nd and 3rd elements used in add/remove edge events Keynodes This command allows you to find/resolve keynodes. Request type : keynodes Request { ..., // common request data \"type\" : \"keynodes\" , \"payload\" : [ // there are a list of commands that you need to process { // command to find element by system identifier \"command\" : \"find\" , \"idtf\" : \"any system identifier\" }, { // Command to resolve element. If it doesn't exist, then create new one. // elType - element type, that will be used to create it. // Should be a any node type. \"command\" : \"resolve\" , \"idtf\" : \"any system identifier\" , \"elType\" : 32 }, ... // any commands ] } Response { ..., // common response data \"payload\" : [ /* List of resolved ScAddr values (numbers). * Each element with index N is a result of N command in a request. * So length of this array should be equal to length * of commands array in request. * 0 - is an invalid ScAddr (not found/resolved) */ ] } Example // request { \"id\" : 1 , \"type\" : \"keynodes\" , \"payload\" : [ { \"command\" : \"find\" , \"idtf\" : \"any system identifier that NOT exist\" }, { \"command\" : \"find\" , \"idtf\" : \"any system identifier that exist\" }, { \"command\" : \"resolve\" , \"idtf\" : \"NOT exist\" , \"elType\" : 1 }, { \"command\" : \"resolve\" , \"idtf\" : \"exist\" , \"elType\" : 1 } ] } // response { \"id\" : 1 , \"status\" : true , \"payload\" : [ 0 , 321 , 435 , 324 ] } Content This command allow to work with ScLink contents. Request type : content Request { ..., // common request data \"type\" : \"content\" , \"payload\" : [ // there are a list of commands that you need to process { // command to set ScLink content \"command\" : \"set\" , \"type\" : \"int\" , // content type \"data\" : 67 , // content could be a string, number \"addr\" : 3123 // ScAddr of ScLink to change content }, { // Comman to get link content \"command\" : \"get\" , \"addr\" : 232 // ScAddr of ScLink to get content }, ... // any commands ] } List of possible content types: int - for integer values; float - for float values; string - for string values; binary - for binary values. Response { ..., // common response data \"payload\" : [ // List of command results true , // true or false for a set command result // for get command it returns content with a type { \"value\" : 56.7 , // value will be a null, if content doesn't exist \"type\" : \"float\" }, ... // other command results ] }","title":"WebSocket"},{"location":"http/websocket/#websocket-protocol","text":"It used to communicate with knowledge base by network from a browser. This protocol based is asynchronous and based on JSON. JSON used instead of binary data to prevent problems with different byte (bit) order on different platforms. ScAddr ScAddr encodes with ScAddr::Hash function","title":"WebSocket protocol"},{"location":"http/websocket/#common","text":"Each request has a common structure: { \"id\" : 2 , \"type\" : \"request type\" , \"payload\" : { ... } } Where: id - unique id of command. Used to identify responses; payload - command specified data. Response also has a common structure: { \"id\" : 2 , \"status\" : true , \"event\" : false , // flag that mark if it is an emited event or not \"payload\" : { ... } } Where: id - id of command; status - has true value when command processed; otherwise has a false value; payload - command specified result data.","title":"Common"},{"location":"http/websocket/#authentificate","text":"TODO Need to make documentation","title":"Authentificate"},{"location":"http/websocket/#createelements","text":"Request type : create_elements With this command you can create a batch of elements. payload of this command contains list of element creation parameters (depend on element type). All of this parameters have common structure: { \"el\" : \"node\" , // type of element to create. Possible values: node, edge, link \"params\" : {} // parameters that depends on element type } There are parameters requested by elements type: node - to create node use parameters: { \"el\" : \"node\" , // type of element to create \"type\" : 342 // ScType value of node type } edge - to create edge use parameters: { \"el\" : \"edge\" , \"src\" : { // source element of edge \"type\" : \"addr\" , // use exist ScAddr of element \"value\" : 2313 // value of ScAddr }, \"trg\" : { // target element of edge \"type\" : \"ref\" , // reference to created element before this one \"value\" : 0 // index of element in CreateElement payload list }, \"type\" : 32 // ScType value of edge type } link - to create link use parameters: { \"el\" : \"link\" , \"type\" : 2 , // ScType value of link type (const or var) \"content\" : \"data\" , // content data of link \"content_type\" : \"string\" // content type : int , float, string, binary } Example // request { \"id\" : 3 , \"type\" : \"create_elements\" , \"payload\" : [ { \"el\" : \"node\" , \"type\" : 1 }, { \"el\" : \"link\" , \"type\" : 2 , \"content\" : 45.4 }, { \"el\" : \"edge\" , \"src\" : { \"type\" : \"ref\" , \"value\" : 0 }, \"trg\" : { \"type\" : \"ref\" , \"value\" : 1 }, \"type\" : 32 } ] } // response { \"id\" : 3 , \"status\" : true , \"payload\" : [ 323 , 534 , 342 ] }","title":"CreateElements"},{"location":"http/websocket/#checkelements","text":"Request type : check_elements With this command you can check if specified elements exist. So you should pass list of ScAddr to check, and this command will return list of each element type. If type is not valid, then element doesn't exist. See ScType for more information. Request { ..., // common request data \"type\" : \"check_elements\" , \"payload\" : [ // there are a list of ScAddr's to check 23123 , 432 , ... ] } Response { ..., // common response data \"payload\" : [ // there is a list of element types (ScType) 32 , // valid type 0 , // not valid type ... ] }","title":"CheckElements"},{"location":"http/websocket/#deleteelements","text":"Request type : delete_elements This request delete specified elements. Request { ..., // common request data \"type\" : \"delete_elements\" , \"payload\" : [ // there are a list of ScAddr's to delete 2323 , 4322 , ... ] } Response If command processed, then response status is true , otherwise status - false","title":"DeleteElements"},{"location":"http/websocket/#searchbytemplate","text":"Request type : search_template This request search constructions by specified template. Request { ..., // common request data \"type\" : \"search_template\" , \"payload\" : [ // there are a list of template triples [ // triple that represents F_A_A template { \"type\" : \"addr\" , \"value\" : 23123 // ScAddr }, { \"type\" : \"type\" , \"value\" : 32 , // ScType (should be a variable type) \"alias\" : \"_edge1\" }, { \"type\" : \"type\" , \"value\" : 2 , // ScType (should be a variable type) \"alias\" : \"_trg\" // can be used in next triples to ref this element } ], [ { \"type\" : \"addr\" , \"value\" : 231342 }, { \"type\" : \"type\" , \"value\" : 2000 , \"alias\" : \"_edge2\" }, { \"type\" : \"alias\" , \"value\" : \"_edge1\" // ref to first triple element }, // last field is an options. You should to use it, when you need to override defaults { \"is_required\" : false } ], ... ] } There are decription options value for an each triple in template: is_required : default value is true . This option can be used to make triple optional in a search (use false value for that) Response { ..., // common response data \"payload\" : { /* this map contains index of specified alias in * result addrs list */ \"aliases\" : { \"trg\" : 2 , \"edge1\" : 1 , \"edge2\" : 4 }, \"addrs\" : [ [ 23123 , 412 , 423 , 231342 , 282 , 412 ], // addrs for 1 st result [ 23123 , 6734 , 85643 , 231342 , 4234 , 6734 ], // addrs for 2 nd result [ 23123 , 7256 , 252 , 0 , 0 , 0 ], // doens't found triple with is_required = false ... ] } } You can use SCs-text language to make a search requests. Just replace payload field with a string, that contains SCs-text . Each vairable identifier (start with _ symbol) will be used as an alias. All other should be a system identifiers, that will be used to find ScAddr of elements. Example : Request { ..., // common request data \"type\" : \"search_template\" , \"payload\" : \"person _-> .._p (* _=> nrel_email:: _[] *);;\" }","title":"SearchByTemplate"},{"location":"http/websocket/#generatebytemplate","text":"Request type : generate_template This request generate construction by specified template. Request { ..., // common request data \"type\" : \"generate_template\" , \"payload\" : { // there are a list of template triples \"templ\" : [ { \"params\" : [ // triple that represents F_A_A template { \"type\" : \"addr\" , \"value\" : 23123 // ScAddr }, { \"type\" : \"type\" , \"value\" : 32 , // ScType (should be a variable type) \"alias\" : \"_edge1\" }, { \"type\" : \"type\" , \"value\" : 2 , // ScType (should be a variable type) \"alias\" : \"_trg\" // can be used in next triples to ref this element } ] }, { \"params\" : [ { \"type\" : \"addr\" , \"value\" : 231342 }, { \"type\" : \"type\" , \"value\" : 2000 , \"alias\" : \"_edge2\" }, { \"type\" : \"alias\" , \"value\" : \"_edge1\" // ref to first triple element } ] }, ... ], /* Map of parameters. Each parameter with specified alias in this map. * Will be used in template generation. Just `type` values can be replaced * by params. Also you can't use alias in parameters for an edges. */ \"params\" : { \"_trg\" : 564 } } } Response { ..., // common response data \"payload\" : { /* This map contains index of ScAddr (in `addrs` field) for each alias from template. */ \"aliases\" : { \"_trg\" : 2 , \"_edge1\" : 1 , \"_edge2\" : 4 }, \"addrs\" : [ 23123 , 4953 , 564 , 231342 , 533 , 4953 ] } } Like in SearchByTemplate you can use SCs-template for generation. Just replace templ field of payload to do that. Example : { ..., // common request data \"type\" : \"generate_template\" , \"payload\" : { // there are a list of template triples \"templ\" : \"person _-> .._p (* _=> nrel_email:: _[test@email.com] *);;\" , /* Map of parameters. Each parameter with specified alias in this map. * Will be used in template generation. Just `type` values can be replaced * by params. Also you can't use alias in parameters for an edges. */ \"params\" : { \".._p\" : 5314 } } }","title":"GenerateByTemplate"},{"location":"http/websocket/#events","text":"Request type : events Request { ..., // common request data \"type\" : \"events\" , \"payload\" : { // there are a list of events to create \"create\" : [ { \"type\" : \"add_output_edge\" , // event type \"addr\" : 324 // element to subscribe events } ], // there are a list of events id's to delete \"delete\" : [ 2 , 4 , 5 ] } } List of possible event types: add_outgoing_edge - used to subscribe for events, when new outgoing edge added from a specified element; add_ingoing_edge - the same as add_outgoing_edge , but for ingoing edges; remove_outgoing_edge - used to subscribe for events, when outgoing edge removed from a specified element; remove_ingoing_edge - the same as remove_outgoing_edge , but for outgoing edges; content_change - used to subscribe for sc-link content changes event; delete_element - used to subscribe for element deletion. Response { ..., // common response data \"payload\" : [ /* List of created event id's. The same order (index) * as in request `create` list */ 2 , 3 , 7 ] } Events emit Each event can be emitted by server and passed to client. It has such structure: { \"id\" : 2 , \"event\" : \"true\" , // payload contains 1 or 3 elements \"payload\" : [ 32 , // ScAddr of subscribed element 324 , // added/removed edge ScAddr 34 // source/target of edge ] } 2nd and 3rd elements used in add/remove edge events","title":"Events"},{"location":"http/websocket/#keynodes","text":"This command allows you to find/resolve keynodes. Request type : keynodes Request { ..., // common request data \"type\" : \"keynodes\" , \"payload\" : [ // there are a list of commands that you need to process { // command to find element by system identifier \"command\" : \"find\" , \"idtf\" : \"any system identifier\" }, { // Command to resolve element. If it doesn't exist, then create new one. // elType - element type, that will be used to create it. // Should be a any node type. \"command\" : \"resolve\" , \"idtf\" : \"any system identifier\" , \"elType\" : 32 }, ... // any commands ] } Response { ..., // common response data \"payload\" : [ /* List of resolved ScAddr values (numbers). * Each element with index N is a result of N command in a request. * So length of this array should be equal to length * of commands array in request. * 0 - is an invalid ScAddr (not found/resolved) */ ] } Example // request { \"id\" : 1 , \"type\" : \"keynodes\" , \"payload\" : [ { \"command\" : \"find\" , \"idtf\" : \"any system identifier that NOT exist\" }, { \"command\" : \"find\" , \"idtf\" : \"any system identifier that exist\" }, { \"command\" : \"resolve\" , \"idtf\" : \"NOT exist\" , \"elType\" : 1 }, { \"command\" : \"resolve\" , \"idtf\" : \"exist\" , \"elType\" : 1 } ] } // response { \"id\" : 1 , \"status\" : true , \"payload\" : [ 0 , 321 , 435 , 324 ] }","title":"Keynodes"},{"location":"http/websocket/#content","text":"This command allow to work with ScLink contents. Request type : content Request { ..., // common request data \"type\" : \"content\" , \"payload\" : [ // there are a list of commands that you need to process { // command to set ScLink content \"command\" : \"set\" , \"type\" : \"int\" , // content type \"data\" : 67 , // content could be a string, number \"addr\" : 3123 // ScAddr of ScLink to change content }, { // Comman to get link content \"command\" : \"get\" , \"addr\" : 232 // ScAddr of ScLink to get content }, ... // any commands ] } List of possible content types: int - for integer values; float - for float values; string - for string values; binary - for binary values. Response { ..., // common response data \"payload\" : [ // List of command results true , // true or false for a set command result // for get command it returns content with a type { \"value\" : 56.7 , // value will be a null, if content doesn't exist \"type\" : \"float\" }, ... // other command results ] }","title":"Content"},{"location":"net/sctp/","text":"\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b SCTP sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 SCTP-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: * \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b - \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0435\u0451 \u0442\u0438\u043f \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0435\u0439. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043c\u0435\u0435\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440. * \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b - \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0435\u0451 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b. \u0420\u0430\u0437\u043c\u0435\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043b\u0438\u0448\u044c \u043e\u0442 \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0435\u0451 \u0442\u0438\u043f\u0430. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443: \u041f\u043e\u043b\u0435 \u0420\u0430\u0437\u043c\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 code 1 \u0431\u0430\u0439\u0442 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043e \u0434\u0430\u043b\u044c\u0448\u0435) flags 1 \u0431\u0430\u0439\u0442 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u043b\u0430\u0433\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0430\u043b\u0435\u0435) id 4 \u0431\u0430\u0439\u0442\u0430 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e \u043d\u0435\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439) size 4 \u0431\u0430\u0439\u0442\u0430 \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u043a id \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u0422\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e, \u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0436\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d \u0432 \u043b\u044e\u0431\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \u0421\u0445\u0435\u043c\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \u0412\u0430\u0436\u043d\u043e : \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0432 \u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441. \u0421\u0435\u0440\u0432\u0435\u0440 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043d\u043e \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0438\u0445 \u043f\u0440\u0438\u0445\u043e\u0434\u0430. sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 SCTP-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: * \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 - \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0435\u0433\u043e \u0442\u0438\u043f \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0435\u043c. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440. * \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0420\u0430\u0437\u043c\u0435\u0440 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043b\u0438\u0448\u044c \u043e\u0442 \u0442\u0438\u043f\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0440\u0435\u0443\u0437\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0435\u0433\u043e \u0442\u0438\u043f\u0430. \u0422\u0438\u043f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0442\u0438\u043f\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443: \u041f\u043e\u043b\u0435 \u0420\u0430\u0437\u043c\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 code 1 \u0431\u0430\u0439\u0442 \u0422\u0438\u043f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 id 4 \u0431\u0430\u0439\u0442\u0430 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 return 1 \u0431\u0430\u0439\u0442 \u041a\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 - \u043e\u0434\u0438\u043d \u0438\u0437 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438 size 4 \u0431\u0430\u0439\u0442\u0430 \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430: \u041a\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 0x00 \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b 0x01 \u0411\u0435\u0437\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b 0x02 \u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d (\u043d\u0435 \u0432\u0435\u0440\u043d\u044b\u0439 sc-\u0430\u0434\u0440\u0435\u0441) 0x03 \u041d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0412\u0430\u0436\u043d\u043e: \u0435\u0441\u043b\u0438 sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0442\u043e sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u043b\u0438\u0448\u044c \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u043f\u043e\u0438\u0441\u043a\u0430: \u041a\u043e\u0434 \u0428\u0430\u0431\u043b\u043e\u043d 0 3f_a_a 1 3a_a_f 2 3f_a_f 3 5f_a_a_a_f 4 5_a_a_f_a_f 5 5_f_a_f_a_f 6 5_f_a_f_a_a 7 5_f_a_a_a_a 8 5_a_a_f_a_a \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043e\u0434\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439: \u041a\u043e\u0434 \u0421\u043e\u0431\u044b\u0442\u0438\u0435 0 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) 1 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) 2 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) 3 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) 4 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 5 \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043a\u043e\u0434\u044b \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432: \u041a\u043e\u0434: 0x01 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u043e\u0434: 0x02 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e sc-\u0430\u0434\u0440\u0435\u0441\u0443 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 2 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0442\u0438\u043f sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x03 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u0443\u0434\u0430\u043b\u044f\u0435\u043c\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u0438\u0448\u044c \u043a\u043e\u0434 \u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u0434\u0430\u043b\u0435\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u043e\u0434: 0x04 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 2 \u0431\u0430\u0439\u0442\u0430 - \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x05 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 sc-\u0441\u0441\u044b\u043b\u043a\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u043d\u0435\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 sc-\u0441\u0441\u044b\u043b\u043a\u0438. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x06 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 sc-\u0434\u0443\u0433\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430, \u0441 \u0443\u043a\u0430\u0437\u043d\u043d\u044b\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 2 \u0431\u0430\u0439\u0442\u0430 - \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 sc-\u0434\u0443\u0433\u0438 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 sc-\u0434\u0443\u0433\u0438. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x07 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u0434\u0443\u0433\u0438 \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u0443\u0433\u0438 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u0434\u0443\u0433\u0438 \u041a\u043e\u0434: 0x08 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041a\u043e\u0434: 0x09 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043c\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e, \u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0441\u0430\u043c\u043e \u043c\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x0a \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u0438\u0441\u043a \u0432\u0441\u0435\u0445 sc-\u0441\u0441\u044b\u043b\u043e\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) N \u0431\u0430\u0439\u0442 - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f: N - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 sc-\u0441\u0441\u044b\u043b\u043e\u043a (4 \u0431\u0430\u0439\u0442\u0430) N sc-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 - \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 sc-\u0441\u0441\u044b\u043b\u043a\u0438. \u041a\u043e\u0434: 0x0b \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442 - sc-\u0430\u0434\u0440\u0435\u0441 \u0441\u0441\u044b\u043b\u043a\u0438 4 \u0431\u0430\u0439\u0442 - \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432 \u0431\u0430\u0439\u0442\u0430\u0445 N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u043e\u0434: 0x0c \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 3-\u0445 \u0438\u043b\u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 1 \u0431\u0430\u0439\u0442 - \u0442\u0438\u043f \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 N \u0431\u0430\u0439\u0442 - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430. \u0417\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u043f\u043e\u0438\u0441\u043a\u0430. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 3f_a_a \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435: 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430; 2 \u0431\u0430\u0439\u0442\u0430 \u0442\u0438\u043f \u0438\u0441\u043a\u043e\u043c\u043e\u0439 \u0434\u0443\u0433\u0438; 2 \u0431\u0430\u0439\u0442\u0430 \u0442\u0438\u043f \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 sc-\u0430\u0434\u0440\u0435\u0441 (4 \u0431\u0430\u0439\u0442\u0430), \u0430 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 a \u0442\u0438\u043f sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (2 \u0431\u0430\u0439\u0442\u0430) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445, \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443, \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 N \u0431\u0430\u0439\u0442 , \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u0441\u043d\u0442\u0440\u0443\u043a\u0446\u0438\u0438. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043e K \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443, \u0442\u043e N = T * K * 4 \u0431\u0430\u0439\u0442 , \u0433\u0434\u0435 T - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0438\u0441\u043a\u043e\u043c\u043e\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u0435, \u0434\u043b\u044f 3-\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043e\u043d\u043e \u0440\u0430\u0432\u043d\u043e 3, \u0434\u043b\u044f 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 - 5. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u043b\u0435\u0436\u0430\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u043e\u043d\u0438 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f sc-\u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b\u0445 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041a\u043e\u0434: 0x0d \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0418\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 ( \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 ) \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 1 \u0431\u0430\u0439\u0442 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 (max 50) N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439: 1 \u0431\u0430\u0439\u0442 - \u0442\u0438\u043f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 nF \u0431\u0430\u0439\u0442 - \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 ( \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0435\u0442 ). \u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (255 - \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430). \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 4 \u0434\u0430\u0441\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. nF - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (fixed), nA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (assign). \u0418\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u044d\u0442\u043e\u0433\u043e. (nF - k) * 4 + nA * 2 \u0431\u0430\u0439\u0442 - \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0438\u0445 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c (k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 4 \u0431\u0430\u0439\u0442\u0430 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 ( rCount ) N \u0431\u0430\u0439\u0442 - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. N = 4 * rCount * k, \u0433\u0434\u0435 k - \u0441\u0443\u043c\u043c\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, k = 8) \u041a\u043e\u0434: 0x0e \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 1 \u0431\u0430\u0439\u0442 - \u0442\u0438\u043f \u0441\u043e\u0431\u044b\u0442\u0438\u044f 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 4 \u0431\u0430\u0439\u0442 . \u0415\u0441\u043b\u0438 \u0436\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043b\u0438\u0448\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0442\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u043e\u0434: 0x0f \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u0442\u043e \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434 \u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 4 \u0431\u0430\u0439\u0442\u0430 - id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0430 \u041a\u043e\u0434: 0x10 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u043d\u0435\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 4 \u0431\u0430\u0439\u0442\u0430 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u0430\u0439\u0442: 4 \u0431\u0430\u0439\u0442\u0430 - id \u0441\u043e\u0431\u044b\u0442\u0438\u044f 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u0430\u0434\u0440\u0435\u0441 sc-\u0434\u0443\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430/\u0441\u043e\u0437\u0434\u0430\u043d\u0430 (\u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0433\u0438)) \u041a\u043e\u0434: 0x11 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 ( \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 ). \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0438 \u0432 \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0445 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f. \u0412\u0430\u0436\u043d\u043e! \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c! \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 1 \u0431\u0430\u0439\u0442 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432/\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 (max <= 50) N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432/\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439: 1 \u0431\u0430\u0439\u0442 - \u0442\u0438\u043f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 nF \u0431\u0430\u0439\u0442 - \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 ( \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0435\u0442 ). \u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (255 - \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430). \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 4 \u0434\u0430\u0441\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. nF - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (fixed), nA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (assign). \u0418\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u044d\u0442\u043e\u0433\u043e. (nF - k) * 4 + nA * 2 \u0431\u0430\u0439\u0442 - \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0438\u0445 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c (k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: N \u0431\u0430\u0439\u0442 - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 N = 4 * k, \u0433\u0434\u0435 k - \u0441\u0443\u043c\u043c\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, k = 8) \u041a\u043e\u0434: 0xa0 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u0438\u0441\u043a sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e \u0435\u0433\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u043c\u0443 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\u0433\u043e sc-\u044d\u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0xa1 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 4 \u0431\u0430\u0439\u0442\u0430 - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041a\u043e\u0434: 0xa2 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0432 \u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445. \u0412\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 http://en.wikipedia.org/wiki/Unix_time \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 8 \u0431\u0430\u0439\u0442 - \u041d\u0438\u0436\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 8 \u0431\u0430\u0439\u0442 - \u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0442\u043c\u0435\u0442\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f. \u041a\u0430\u0436\u0434\u0430\u044f \u0442\u0430\u043a\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0442\u043c\u0435\u0442\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0437\u0438\u043a \u043f\u043e\u043b\u0435\u0439: 8 \u0431\u0430\u0439\u0442 - \u0412\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 8 \u0431\u0430\u0439\u0442 - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 8 \u0431\u0430\u0439\u0442 - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0434\u0443\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 8 \u0431\u0430\u0439\u0442 - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0441\u0441\u044b\u043b\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 8 \u0431\u0430\u0439\u0442 - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u044f\u0447\u0435\u0435\u043a \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 8 \u0431\u0430\u0439\u0442 - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a sctp \u0441\u0435\u0440\u0432\u0435\u0440\u0443 (\u043d\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445, \u0430 \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0435) 8 \u0431\u0430\u0439\u0442 - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 sctp \u043a\u043e\u043c\u0430\u043d\u0434 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438) 8 \u0431\u0430\u0439\u0442 - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 sctp \u043a\u043e\u043c\u0430\u043d\u0434 1 \u0431\u0430\u0439\u0442 - \u0424\u043b\u0430\u0433 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 1, \u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0431\u044b\u043b\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 sctp \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 0, \u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u0443\u0436\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u041a\u043e\u0434: 0xa3 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u043d\u0435\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u0432\u0435\u0440\u0441\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c sctp \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430. (\u0441\u043f\u043e\u0441\u043e\u0431 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0441\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c)","title":"Sctp-protocol"},{"location":"net/sctp/#sctp","text":"sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 SCTP-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: * \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b - \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0435\u0451 \u0442\u0438\u043f \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0435\u0439. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043c\u0435\u0435\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440. * \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b - \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0435\u0451 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b. \u0420\u0430\u0437\u043c\u0435\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043b\u0438\u0448\u044c \u043e\u0442 \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0435\u0451 \u0442\u0438\u043f\u0430. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443: \u041f\u043e\u043b\u0435 \u0420\u0430\u0437\u043c\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 code 1 \u0431\u0430\u0439\u0442 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043e \u0434\u0430\u043b\u044c\u0448\u0435) flags 1 \u0431\u0430\u0439\u0442 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u043b\u0430\u0433\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0430\u043b\u0435\u0435) id 4 \u0431\u0430\u0439\u0442\u0430 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e \u043d\u0435\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439) size 4 \u0431\u0430\u0439\u0442\u0430 \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u043a id \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u0422\u0430\u043a \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e, \u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0436\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d \u0432 \u043b\u044e\u0431\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \u0421\u0445\u0435\u043c\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \u0412\u0430\u0436\u043d\u043e : \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0432 \u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441. \u0421\u0435\u0440\u0432\u0435\u0440 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043d\u043e \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0438\u0445 \u043f\u0440\u0438\u0445\u043e\u0434\u0430. sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 SCTP-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: * \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 - \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0435\u0433\u043e \u0442\u0438\u043f \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0435\u043c. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440. * \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0420\u0430\u0437\u043c\u0435\u0440 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043b\u0438\u0448\u044c \u043e\u0442 \u0442\u0438\u043f\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0440\u0435\u0443\u0437\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0435\u0433\u043e \u0442\u0438\u043f\u0430. \u0422\u0438\u043f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0442\u0438\u043f\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443: \u041f\u043e\u043b\u0435 \u0420\u0430\u0437\u043c\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 code 1 \u0431\u0430\u0439\u0442 \u0422\u0438\u043f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 id 4 \u0431\u0430\u0439\u0442\u0430 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 return 1 \u0431\u0430\u0439\u0442 \u041a\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 - \u043e\u0434\u0438\u043d \u0438\u0437 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438 size 4 \u0431\u0430\u0439\u0442\u0430 \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 (\u0432 \u0431\u0430\u0439\u0442\u0430\u0445) \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430: \u041a\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 0x00 \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b 0x01 \u0411\u0435\u0437\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b 0x02 \u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d (\u043d\u0435 \u0432\u0435\u0440\u043d\u044b\u0439 sc-\u0430\u0434\u0440\u0435\u0441) 0x03 \u041d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0412\u0430\u0436\u043d\u043e: \u0435\u0441\u043b\u0438 sctp-\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0442\u043e sctp-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u043b\u0438\u0448\u044c \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u043f\u043e\u0438\u0441\u043a\u0430: \u041a\u043e\u0434 \u0428\u0430\u0431\u043b\u043e\u043d 0 3f_a_a 1 3a_a_f 2 3f_a_f 3 5f_a_a_a_f 4 5_a_a_f_a_f 5 5_f_a_f_a_f 6 5_f_a_f_a_a 7 5_f_a_a_a_a 8 5_a_a_f_a_a \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043e\u0434\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439: \u041a\u043e\u0434 \u0421\u043e\u0431\u044b\u0442\u0438\u0435 0 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) 1 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) 2 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) 3 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0434\u0443\u0433\u0438 (\u0440\u0435\u0431\u0440\u0430) 4 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 5 \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043a\u043e\u0434\u044b \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0438\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432: \u041a\u043e\u0434: 0x01 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u043e\u0434: 0x02 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e sc-\u0430\u0434\u0440\u0435\u0441\u0443 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 2 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0442\u0438\u043f sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x03 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c sc-\u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u0443\u0434\u0430\u043b\u044f\u0435\u043c\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u0438\u0448\u044c \u043a\u043e\u0434 \u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u0434\u0430\u043b\u0435\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u043e\u0434: 0x04 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 2 \u0431\u0430\u0439\u0442\u0430 - \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e sc-\u0443\u0437\u043b\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x05 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 sc-\u0441\u0441\u044b\u043b\u043a\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u043d\u0435\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 sc-\u0441\u0441\u044b\u043b\u043a\u0438. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x06 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 sc-\u0434\u0443\u0433\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430, \u0441 \u0443\u043a\u0430\u0437\u043d\u043d\u044b\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 2 \u0431\u0430\u0439\u0442\u0430 - \u0442\u0438\u043f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0439 sc-\u0434\u0443\u0433\u0438 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 sc-\u0434\u0443\u0433\u0438. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x07 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 sc-\u0434\u0443\u0433\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u0434\u0443\u0433\u0438 \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u0443\u0433\u0438 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 \u0434\u0443\u0433\u0438 \u041a\u043e\u0434: 0x08 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041a\u043e\u0434: 0x09 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - sc-\u0430\u0434\u0440\u0435\u0441 \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043c\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e, \u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0441\u0430\u043c\u043e \u043c\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0x0a \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u0438\u0441\u043a \u0432\u0441\u0435\u0445 sc-\u0441\u0441\u044b\u043b\u043e\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) N \u0431\u0430\u0439\u0442 - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f: N - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 sc-\u0441\u0441\u044b\u043b\u043e\u043a (4 \u0431\u0430\u0439\u0442\u0430) N sc-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 - \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 sc-\u0441\u0441\u044b\u043b\u043a\u0438. \u041a\u043e\u0434: 0x0b \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e sc-\u0441\u0441\u044b\u043b\u043a\u0438 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442 - sc-\u0430\u0434\u0440\u0435\u0441 \u0441\u0441\u044b\u043b\u043a\u0438 4 \u0431\u0430\u0439\u0442 - \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432 \u0431\u0430\u0439\u0442\u0430\u0445 N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u043c \u043a\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u043a\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u043e\u0434: 0x0c \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 3-\u0445 \u0438\u043b\u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 1 \u0431\u0430\u0439\u0442 - \u0442\u0438\u043f \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 N \u0431\u0430\u0439\u0442 - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430. \u0417\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u043f\u043e\u0438\u0441\u043a\u0430. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 3f_a_a \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435: 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430; 2 \u0431\u0430\u0439\u0442\u0430 \u0442\u0438\u043f \u0438\u0441\u043a\u043e\u043c\u043e\u0439 \u0434\u0443\u0433\u0438; 2 \u0431\u0430\u0439\u0442\u0430 \u0442\u0438\u043f \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0433\u043e sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 sc-\u0430\u0434\u0440\u0435\u0441 (4 \u0431\u0430\u0439\u0442\u0430), \u0430 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 a \u0442\u0438\u043f sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (2 \u0431\u0430\u0439\u0442\u0430) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445, \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443, \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 N \u0431\u0430\u0439\u0442 , \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u0441\u043d\u0442\u0440\u0443\u043a\u0446\u0438\u0438. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043e K \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0443, \u0442\u043e N = T * K * 4 \u0431\u0430\u0439\u0442 , \u0433\u0434\u0435 T - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0438\u0441\u043a\u043e\u043c\u043e\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u0435, \u0434\u043b\u044f 3-\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043e\u043d\u043e \u0440\u0430\u0432\u043d\u043e 3, \u0434\u043b\u044f 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 - 5. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u043b\u0435\u0436\u0430\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u043e\u043d\u0438 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f sc-\u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b\u0445 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041a\u043e\u0434: 0x0d \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0418\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 ( \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 ) \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 1 \u0431\u0430\u0439\u0442 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 (max 50) N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439: 1 \u0431\u0430\u0439\u0442 - \u0442\u0438\u043f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 nF \u0431\u0430\u0439\u0442 - \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 ( \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0435\u0442 ). \u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (255 - \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430). \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 4 \u0434\u0430\u0441\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. nF - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (fixed), nA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (assign). \u0418\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u044d\u0442\u043e\u0433\u043e. (nF - k) * 4 + nA * 2 \u0431\u0430\u0439\u0442 - \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0438\u0445 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c (k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 4 \u0431\u0430\u0439\u0442\u0430 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 ( rCount ) N \u0431\u0430\u0439\u0442 - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. N = 4 * rCount * k, \u0433\u0434\u0435 k - \u0441\u0443\u043c\u043c\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, k = 8) \u041a\u043e\u0434: 0x0e \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 1 \u0431\u0430\u0439\u0442 - \u0442\u0438\u043f \u0441\u043e\u0431\u044b\u0442\u0438\u044f 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 4 \u0431\u0430\u0439\u0442 . \u0415\u0441\u043b\u0438 \u0436\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043b\u0438\u0448\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0442\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u043e\u0434: 0x0f \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u0442\u043e \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434 \u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 4 \u0431\u0430\u0439\u0442\u0430 - id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0430 \u041a\u043e\u0434: 0x10 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u043d\u0435\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 4 \u0431\u0430\u0439\u0442\u0430 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439. \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u0430\u0439\u0442: 4 \u0431\u0430\u0439\u0442\u0430 - id \u0441\u043e\u0431\u044b\u0442\u0438\u044f 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u0430\u0434\u0440\u0435\u0441 sc-\u0434\u0443\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430/\u0441\u043e\u0437\u0434\u0430\u043d\u0430 (\u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0433\u0438)) \u041a\u043e\u0434: 0x11 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 ( \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 ). \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0438 \u0432 \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0445 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f. \u0412\u0430\u0436\u043d\u043e! \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c! \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 1 \u0431\u0430\u0439\u0442 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432/\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 (max <= 50) N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432/\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439: 1 \u0431\u0430\u0439\u0442 - \u0442\u0438\u043f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 nF \u0431\u0430\u0439\u0442 - \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 ( \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0435\u0442 ). \u041f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u044d\u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (255 - \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430). \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0442\u043e \u043d\u043e\u043c\u0435\u0440 \u0430\u0434\u0440\u0435\u0441\u0430 4 \u0434\u0430\u0441\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. nF - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (fixed), nA - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 (assign). \u0418\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0434\u043e \u044d\u0442\u043e\u0433\u043e. (nF - k) * 4 + nA * 2 \u0431\u0430\u0439\u0442 - \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0438\u0445 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c (k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: N \u0431\u0430\u0439\u0442 - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 N = 4 * k, \u0433\u0434\u0435 k - \u0441\u0443\u043c\u043c\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u0441\u0435\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441 \u0434\u0432\u0443\u043c\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 3-\u0445 \u0438 5-\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, k = 8) \u041a\u043e\u0434: 0xa0 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u0438\u0441\u043a sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e \u0435\u0433\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u043c\u0443 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u0434\u0440\u0435\u0441 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\u0433\u043e sc-\u044d\u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u0418\u043d\u0430\u0447\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u043b\u044f \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043d\u0435\u0442) \u041a\u043e\u0434: 0xa1 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 4 \u0431\u0430\u0439\u0442\u0430 - \u0430\u0434\u0440\u0435\u0441 sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 4 \u0431\u0430\u0439\u0442\u0430 - N (\u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445) N \u0431\u0430\u0439\u0442 - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041a\u043e\u0434: 0xa2 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0432 \u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445. \u0412\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 http://en.wikipedia.org/wiki/Unix_time \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: 8 \u0431\u0430\u0439\u0442 - \u041d\u0438\u0436\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 8 \u0431\u0430\u0439\u0442 - \u0412\u0435\u0440\u0445\u043d\u044f\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u0442\u043c\u0435\u0442\u043e\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f. \u041a\u0430\u0436\u0434\u0430\u044f \u0442\u0430\u043a\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u0442\u043c\u0435\u0442\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0437\u0438\u043a \u043f\u043e\u043b\u0435\u0439: 8 \u0431\u0430\u0439\u0442 - \u0412\u0440\u0435\u043c\u044f \u0441\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 8 \u0431\u0430\u0439\u0442 - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 8 \u0431\u0430\u0439\u0442 - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0434\u0443\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 8 \u0431\u0430\u0439\u0442 - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sc-\u0441\u0441\u044b\u043b\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 8 \u0431\u0430\u0439\u0442 - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u044f\u0447\u0435\u0435\u043a \u0432 sc-\u043f\u0430\u043c\u044f\u0442\u0438 8 \u0431\u0430\u0439\u0442 - \u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a sctp \u0441\u0435\u0440\u0432\u0435\u0440\u0443 (\u043d\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445, \u0430 \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0435) 8 \u0431\u0430\u0439\u0442 - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 sctp \u043a\u043e\u043c\u0430\u043d\u0434 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438) 8 \u0431\u0430\u0439\u0442 - \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 sctp \u043a\u043e\u043c\u0430\u043d\u0434 1 \u0431\u0430\u0439\u0442 - \u0424\u043b\u0430\u0433 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0431\u043e\u0440\u0430 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 1, \u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0431\u044b\u043b\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 sctp \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0430\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e 0, \u0442\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u0443\u0436\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u041a\u043e\u0434: 0xa3 \u041a\u043e\u043c\u0430\u043d\u0434\u0430: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u043d\u0435\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f 4 \u0431\u0430\u0439\u0442\u0430 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u0432\u0435\u0440\u0441\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c sctp \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430. (\u0441\u043f\u043e\u0441\u043e\u0431 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0441\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c)","title":"\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b SCTP"},{"location":"other/config/","text":"sc-memory Configuration [ memory ] max_loaded_segments = 16 # Maximum number of segments. By default: 65536 [ filememory ] engine = filesystem # used filememory plugin. Possible values: filesystem, redis [ redis ] host = 127 .0.0.1 # ip-address of redis server port = 6379 # port of redis server timeout = 1500 # max timeout for responce from redis server in milliseconds [ python ] modules_path = ../python_modules ; ../python # list of search path of python modules (default ./python) sctp-server Configuration [ Network ] Port = 56787 # port listening by sctp server [ Repo ] Path = /home/user/repo # path to knowledge base binary SavePeriod = 3600 # period (in seconds) to save sc-memory state [ Extensions ] Directory = /home/user/sc-machine/bin/extensions # path to directory with sc-memory extensions (ScModules) [ Stat ] UpdatePeriod = 3600 # period (in seconds) to update sc-memory stat Path = /home/user/stat # path to save stat ... # configuation of sc-machine When you run SCTP-server, then you need to append configuration of sc-memory (see above) to the end of configuration file for server.","title":"Configuration files"},{"location":"other/config/#sc-memory","text":"Configuration [ memory ] max_loaded_segments = 16 # Maximum number of segments. By default: 65536 [ filememory ] engine = filesystem # used filememory plugin. Possible values: filesystem, redis [ redis ] host = 127 .0.0.1 # ip-address of redis server port = 6379 # port of redis server timeout = 1500 # max timeout for responce from redis server in milliseconds [ python ] modules_path = ../python_modules ; ../python # list of search path of python modules (default ./python)","title":"sc-memory"},{"location":"other/config/#sctp-server","text":"Configuration [ Network ] Port = 56787 # port listening by sctp server [ Repo ] Path = /home/user/repo # path to knowledge base binary SavePeriod = 3600 # period (in seconds) to save sc-memory state [ Extensions ] Directory = /home/user/sc-machine/bin/extensions # path to directory with sc-memory extensions (ScModules) [ Stat ] UpdatePeriod = 3600 # period (in seconds) to update sc-memory stat Path = /home/user/stat # path to save stat ... # configuation of sc-machine When you run SCTP-server, then you need to append configuration of sc-memory (see above) to the end of configuration file for server.","title":"sctp-server"},{"location":"other/scs/","text":"Common SCs-code - is a text representation of SC-code. Whole text consist of sentences, that separated by ;; symbols. Comments You can use C-style comments in SCs text: // one line comment fruit -> apple ; /* Multiline * comment */ Link to files To make an sc-link into specified file you can use special type identifier: \"file://<file name>\" \"file://<file name>\" - is a relative path to a file. According to a file, where it used; \"file:///<file_name>\" - is an absolute path to a file. Names There are some tricks with object names: ... - is an unnamed object; _<object name> - all object names, that starts with symbol _ represents a variable type of objects. Objects identifier visibility. By default all objects with name x are visible anywhere. After translating it into memory this object will have a system identifier equal to x . So if you use x in different scs files, then you designate the same object in them (would be the same element in a knowledge base). Sometimes you need to designate the same objects in different files, but do not generate a system identifier in memory for it. In this case you should to prefix it name with a . symbol. For example: .x . In case, when you need to make a named object just local for an scs file, then you should to use .. prefix (example: ..x ). So a rule to build identifier is: [ visibility ][ variable ]< identifier > For example identifier .._x localy visible variable identifier. Aliases You can use alias for any sc-element by using = operator. There are some examples: @ file_alias = \"file://...\" ;; @ link_alias = [] ;; @ element_alias = element_idtf ;; @ edge_alias = ( c -> b ) ;; @ alias_to_alias = @ other_alias ;; Warning Aliases visible just in a file scope. You should define alias before usage. Note SCs-code is splitted into levels. Each level allows to minimize number of string symbols to represent the same structures. SCs level 1 SCs-code level 1 - is a simple representation of SC-code. It represents it with just simple triples. Each triple contains subject , predicate , object that are splitted by | symbol. Line subject | predicate | object;; is a sentence. Identifier of subject , predicate , object build with rule: < type > # < identifier > Where type - is an element type specification. It can be one of possible values: sc_node - equal to ; sc_link - equal to ; sc_edge_dcommon - equal to ; sc_edge_ucommon - equal to ; sc_edge_main - equal to ; sc_edge_access - equal to . Examples SCg construction Equal SCs-level 1 text // append set of apples into fruit set sc_node#fruit | sc_edge_main#... | sc_node#apple;; // append set of bananas into fruit set sc_node#fruit | sc_edge_main#... | sc_node#banana;; sc_node#apple | sc_edge_dcommon#..e | \"file://apple.png\";; /*append edge from nrel_image relation into edge between apple set and it's image*/ sc_node#nrel_image | sc_edge_main#... | sc_edge_dcommon#..e;; SCs-level 1 allows you to represent any kind of SC-code construction. It's a low-level representation and commonly used as a transport format, that is very simple for parsing. SCs level 2 This level of SCs-text add two new features: using of extended alphabet of edges; using of compound identifiers of an edges. On this level you can make sentences by rule: <element> <edge> <element>;; Where <edge> can be on of values: SCs SCg equivalent < or > <> <.. or ..> <=> _<=> <= or => _<= or _=> <- or -> _<- or _-> <|- or -|> _<|- or _-|> </- or -/> _</- or _-/> <~ or ~> _<~ or _~> <|~ or ~|> _<|~ or _~|> </~ or ~/> _</~ or _~/> SCg construction Equal SCs-level 2 text fruit -> apple;; // backward direction banana < - fruit;; Compound identifier of an edge builds as a sentence in SCs-level 2, but without ;; separator and inside brackets () : (<element> <edge> <element>) . So that allows to simplify usage of an edge as a source or target of another one. Examples SCg construction Equal SCs-level 2 text nrel_image -> (fruit => \"file://apple.png\");; d -> (c -> (a -> b));; (a -> b) -> (c <- d);; SCs level 3 This level of SCs-text allows to minimize symbols to represent constructions like this one: c -> ( a -> b ) ;; To do that you should use sentence like this: < object > < edge > < attribute > : < object > For this example it would be like this: a -> c : b ;; In case, when output edge from c is an variable, then use :: splitter instead of : : a -> c :: b ;; equal to: c _-> ( a -> b ) ;; Note : you can use : , :: just to replace -> or _-> edges. Examples SCg construction Equal SCs-level 3 text apple => nrel_image: \"file://apple.png\";; Note : it is possible to use any number of : , :: in one sentence. a -> c: d:: b;; SCs level 4 This level of SCs-text allows to combine many setences with one element into one. For that pupropses used ';' symbol. So if we have some sentences like: x -> y ;; x <- z ;; x => h : r ;; Then using SCs level 4 we can write them like this: x -> y ; <- z ; => h : r ;; Another words, this level of SCs text, allows to use source element one time. Examples SCg construction Equal SCs-level 4 text fruit -> apple; -> banana;; a -> c: d: b; -> e; -> g: f;; SCs level 5 Internal sentences added to SCs-text on this level. They are wrapped by (* ... *) brackets. This type of sentences allow to describe connections of an element inplace. You can place these internal sentences after object element in triple ( subject -> object (* ... *);; ), but before ;; separator. You can use level 2-4 sentences inside this one. But there is a just one rule: You doesn't need to specify start element for each sentece. Because object (for which internal sentece builds) is going to be a subject for all internal sentences Look at the examples, to understand how it works: SCs-level 2-4 SCs-level 5 Description set -> attr: item;; item -> subitem;; set -> attr: item (* -> subitem;; *);; This is a simple example, that allow to make an SCs-text more readable and useful. In this case text has a sublevels, that allow to read it faster. set -> attr: item;; item -> subitem;; item -> attr2: subitem2;; set -> attr: item (* -> subitem;; -> attr2: subitem2;; *);; You can use as more as you need sentences in (* *) , but all of them should be separated by ;; . @en_idtf = [sc-element];; @ru_idtf = [sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442];; @en_idtf < - lang_en;; @ru_idtf < - lang_ru;; sc_element => nrel_main_idtf: @en_idtf; @ru_idtf;; sc_element => nrel_main_idtf: [sc-element] (* < - lang_en;; *); => nrel_main_idtf: [sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442] (* < - lang_ru;; *);; This type of syntax is very useful, when you need to specify some meta information on sc-link 's. In this example we specify two main identifiers for a sc_element . One is an english ( lang_en ) identifier, another one is a russian ( lang_ru ). SCs level 6 There are some new complex aliases, that adds by this level of SCs-text : [...] - this is a short representation of sc-link with a content. You can create sc-link with a specified content by using this feature. There are all possible cases: Type Description Example string You can write any string that you wish inside [ ... ] alias x -> [any string];; x -> [this is a multiline text];; number You can specify a number as a binary data. To do that, just use syntax: [^\"type: value\"] . Where type is a one of possible types: int - signed integer value (32 bit). You can also use such types for an integer: int8 , int16 , int32 , int64 uint - unsigned integer value (32 bit). You can also use such type for an unsigned integer: uint8 , uint16 , uint32 , uint64 float - 32-bit float value double - 64-bit float value x -> [^\"float: 435.2346\"];; x -> [^\"int8: 7\"];; x -> [^\"uint: 781236\"];; [* ... *] this is a short representation of sc-structure . You can use just SCs-text inside this brackets. So these brackets will designate an sc-structure ( sc-node with a type sc_node_struct ). All elements inside brackets will have ingoing edge (type sc_edge_main ) from that sc-node . SCs-text level 2-5 SCs-text level 6 @edge_alias = (set -> item);; struct -> set; item; @edge_alias;; @struct = [ set -> item;; ];; Thats important SCs-text inside [* ... *] has the same rules and semantic, like it was be in a separated file { ... } this is a short representation of set. This feature allow to make sets in very fast way. Syntax looks like: @ set = { element1 ; attr2 : element2 ; ... last_element // no semicolon after last element } SCs-text level 2-5 SCs-text level 6 Comments set < - sc_node_tuple; -> element1; -> attr2: element2; -> element3;; @set = { element1; attr2: element2; element3 // no semicolon };; Using set looks much cleaner. You can use even attributes on it meta_set < - sc_node_tuple; -> set1; -> set2;; set1 < - sc_node_tuple; -> element1; -> attr2: element2; -> element3;; set2 < - sc_node_tuple; -> element5; -> element6;; set3 < - sc_node_tuple; -> element10;; element => nrel_relation: set3;; @meta_set = { { element1; attr2: element2; element3 }; { element5; element6 } };; element => nrel_relation: { element10 };; You can use set alias inside any other complex aliases and triples. Keynodes There are a list of element type keynodes, that can be used to specify type of an element: Keynode Equal sc-type Equal SCg-element sc_node ScType::Node sc_link ScType::Link sc_edge_dcommon ScType::EdgeDCommon sc_edge_ucommon ScType::EdgeUCommon sc_edge_main ScType::EdgeAccessConstPosPerm sc_edge_access ScType::EdgeAccess sc_node_tuple ScType::NodeTuple sc_node_struct ScType::NodeStruct sc_node_role_relation ScType::NodeRole sc_node_norole_relation ScType::NodeNoRole sc_node_class ScType::NodeClass sc_node_abstract ScType::NodeAbstract sc_node_material ScType::NodeMaterial There are old keynodes, that used for backward compatibility: Keynode Equal sc-type New keynode sc_arc_main ScType::EdgeAccessConstPosPerm sc_edge_main sc_edge ScType::EdgeUCommon sc_edge_ucommon sc_arc_common ScType::EdgeDCommon sc_edge_dcommon sc_arc_access ScType::EdgeAccess sc_edge_access sc_node_not_relation ScType::NodeClass sc_node_class sc_node_not_binary_tuple ScType::NodeTuple sc_node_tuple There is an example of usage: SCs-code Equal SCg-code a < - sc_node_class;; a _-> _b;; _b < - sc_node_material;; _x => nrel_y: t;; nrel_y < - sc_node_norole_relation;;","title":"SCs language"},{"location":"other/scs/#common","text":"SCs-code - is a text representation of SC-code. Whole text consist of sentences, that separated by ;; symbols.","title":"Common"},{"location":"other/scs/#comments","text":"You can use C-style comments in SCs text: // one line comment fruit -> apple ; /* Multiline * comment */","title":"Comments"},{"location":"other/scs/#link-to-files","text":"To make an sc-link into specified file you can use special type identifier: \"file://<file name>\" \"file://<file name>\" - is a relative path to a file. According to a file, where it used; \"file:///<file_name>\" - is an absolute path to a file.","title":"Link to files"},{"location":"other/scs/#names","text":"There are some tricks with object names: ... - is an unnamed object; _<object name> - all object names, that starts with symbol _ represents a variable type of objects. Objects identifier visibility. By default all objects with name x are visible anywhere. After translating it into memory this object will have a system identifier equal to x . So if you use x in different scs files, then you designate the same object in them (would be the same element in a knowledge base). Sometimes you need to designate the same objects in different files, but do not generate a system identifier in memory for it. In this case you should to prefix it name with a . symbol. For example: .x . In case, when you need to make a named object just local for an scs file, then you should to use .. prefix (example: ..x ). So a rule to build identifier is: [ visibility ][ variable ]< identifier > For example identifier .._x localy visible variable identifier.","title":"Names"},{"location":"other/scs/#aliases","text":"You can use alias for any sc-element by using = operator. There are some examples: @ file_alias = \"file://...\" ;; @ link_alias = [] ;; @ element_alias = element_idtf ;; @ edge_alias = ( c -> b ) ;; @ alias_to_alias = @ other_alias ;; Warning Aliases visible just in a file scope. You should define alias before usage. Note SCs-code is splitted into levels. Each level allows to minimize number of string symbols to represent the same structures.","title":"Aliases"},{"location":"other/scs/#scs-level-1","text":"SCs-code level 1 - is a simple representation of SC-code. It represents it with just simple triples. Each triple contains subject , predicate , object that are splitted by | symbol. Line subject | predicate | object;; is a sentence. Identifier of subject , predicate , object build with rule: < type > # < identifier > Where type - is an element type specification. It can be one of possible values: sc_node - equal to ; sc_link - equal to ; sc_edge_dcommon - equal to ; sc_edge_ucommon - equal to ; sc_edge_main - equal to ; sc_edge_access - equal to . Examples SCg construction Equal SCs-level 1 text // append set of apples into fruit set sc_node#fruit | sc_edge_main#... | sc_node#apple;; // append set of bananas into fruit set sc_node#fruit | sc_edge_main#... | sc_node#banana;; sc_node#apple | sc_edge_dcommon#..e | \"file://apple.png\";; /*append edge from nrel_image relation into edge between apple set and it's image*/ sc_node#nrel_image | sc_edge_main#... | sc_edge_dcommon#..e;; SCs-level 1 allows you to represent any kind of SC-code construction. It's a low-level representation and commonly used as a transport format, that is very simple for parsing.","title":"SCs level 1"},{"location":"other/scs/#scs-level-2","text":"This level of SCs-text add two new features: using of extended alphabet of edges; using of compound identifiers of an edges. On this level you can make sentences by rule: <element> <edge> <element>;; Where <edge> can be on of values: SCs SCg equivalent < or > <> <.. or ..> <=> _<=> <= or => _<= or _=> <- or -> _<- or _-> <|- or -|> _<|- or _-|> </- or -/> _</- or _-/> <~ or ~> _<~ or _~> <|~ or ~|> _<|~ or _~|> </~ or ~/> _</~ or _~/> SCg construction Equal SCs-level 2 text fruit -> apple;; // backward direction banana < - fruit;; Compound identifier of an edge builds as a sentence in SCs-level 2, but without ;; separator and inside brackets () : (<element> <edge> <element>) . So that allows to simplify usage of an edge as a source or target of another one. Examples SCg construction Equal SCs-level 2 text nrel_image -> (fruit => \"file://apple.png\");; d -> (c -> (a -> b));; (a -> b) -> (c <- d);;","title":"SCs level 2"},{"location":"other/scs/#scs-level-3","text":"This level of SCs-text allows to minimize symbols to represent constructions like this one: c -> ( a -> b ) ;; To do that you should use sentence like this: < object > < edge > < attribute > : < object > For this example it would be like this: a -> c : b ;; In case, when output edge from c is an variable, then use :: splitter instead of : : a -> c :: b ;; equal to: c _-> ( a -> b ) ;; Note : you can use : , :: just to replace -> or _-> edges. Examples SCg construction Equal SCs-level 3 text apple => nrel_image: \"file://apple.png\";; Note : it is possible to use any number of : , :: in one sentence. a -> c: d:: b;;","title":"SCs level 3"},{"location":"other/scs/#scs-level-4","text":"This level of SCs-text allows to combine many setences with one element into one. For that pupropses used ';' symbol. So if we have some sentences like: x -> y ;; x <- z ;; x => h : r ;; Then using SCs level 4 we can write them like this: x -> y ; <- z ; => h : r ;; Another words, this level of SCs text, allows to use source element one time. Examples SCg construction Equal SCs-level 4 text fruit -> apple; -> banana;; a -> c: d: b; -> e; -> g: f;;","title":"SCs level 4"},{"location":"other/scs/#scs-level-5","text":"Internal sentences added to SCs-text on this level. They are wrapped by (* ... *) brackets. This type of sentences allow to describe connections of an element inplace. You can place these internal sentences after object element in triple ( subject -> object (* ... *);; ), but before ;; separator. You can use level 2-4 sentences inside this one. But there is a just one rule: You doesn't need to specify start element for each sentece. Because object (for which internal sentece builds) is going to be a subject for all internal sentences Look at the examples, to understand how it works: SCs-level 2-4 SCs-level 5 Description set -> attr: item;; item -> subitem;; set -> attr: item (* -> subitem;; *);; This is a simple example, that allow to make an SCs-text more readable and useful. In this case text has a sublevels, that allow to read it faster. set -> attr: item;; item -> subitem;; item -> attr2: subitem2;; set -> attr: item (* -> subitem;; -> attr2: subitem2;; *);; You can use as more as you need sentences in (* *) , but all of them should be separated by ;; . @en_idtf = [sc-element];; @ru_idtf = [sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442];; @en_idtf < - lang_en;; @ru_idtf < - lang_ru;; sc_element => nrel_main_idtf: @en_idtf; @ru_idtf;; sc_element => nrel_main_idtf: [sc-element] (* < - lang_en;; *); => nrel_main_idtf: [sc-\u044d\u043b\u0435\u043c\u0435\u043d\u0442] (* < - lang_ru;; *);; This type of syntax is very useful, when you need to specify some meta information on sc-link 's. In this example we specify two main identifiers for a sc_element . One is an english ( lang_en ) identifier, another one is a russian ( lang_ru ).","title":"SCs level 5"},{"location":"other/scs/#scs-level-6","text":"There are some new complex aliases, that adds by this level of SCs-text : [...] - this is a short representation of sc-link with a content. You can create sc-link with a specified content by using this feature. There are all possible cases: Type Description Example string You can write any string that you wish inside [ ... ] alias x -> [any string];; x -> [this is a multiline text];; number You can specify a number as a binary data. To do that, just use syntax: [^\"type: value\"] . Where type is a one of possible types: int - signed integer value (32 bit). You can also use such types for an integer: int8 , int16 , int32 , int64 uint - unsigned integer value (32 bit). You can also use such type for an unsigned integer: uint8 , uint16 , uint32 , uint64 float - 32-bit float value double - 64-bit float value x -> [^\"float: 435.2346\"];; x -> [^\"int8: 7\"];; x -> [^\"uint: 781236\"];; [* ... *] this is a short representation of sc-structure . You can use just SCs-text inside this brackets. So these brackets will designate an sc-structure ( sc-node with a type sc_node_struct ). All elements inside brackets will have ingoing edge (type sc_edge_main ) from that sc-node . SCs-text level 2-5 SCs-text level 6 @edge_alias = (set -> item);; struct -> set; item; @edge_alias;; @struct = [ set -> item;; ];; Thats important SCs-text inside [* ... *] has the same rules and semantic, like it was be in a separated file { ... } this is a short representation of set. This feature allow to make sets in very fast way. Syntax looks like: @ set = { element1 ; attr2 : element2 ; ... last_element // no semicolon after last element } SCs-text level 2-5 SCs-text level 6 Comments set < - sc_node_tuple; -> element1; -> attr2: element2; -> element3;; @set = { element1; attr2: element2; element3 // no semicolon };; Using set looks much cleaner. You can use even attributes on it meta_set < - sc_node_tuple; -> set1; -> set2;; set1 < - sc_node_tuple; -> element1; -> attr2: element2; -> element3;; set2 < - sc_node_tuple; -> element5; -> element6;; set3 < - sc_node_tuple; -> element10;; element => nrel_relation: set3;; @meta_set = { { element1; attr2: element2; element3 }; { element5; element6 } };; element => nrel_relation: { element10 };; You can use set alias inside any other complex aliases and triples.","title":"SCs level 6"},{"location":"other/scs/#keynodes","text":"There are a list of element type keynodes, that can be used to specify type of an element: Keynode Equal sc-type Equal SCg-element sc_node ScType::Node sc_link ScType::Link sc_edge_dcommon ScType::EdgeDCommon sc_edge_ucommon ScType::EdgeUCommon sc_edge_main ScType::EdgeAccessConstPosPerm sc_edge_access ScType::EdgeAccess sc_node_tuple ScType::NodeTuple sc_node_struct ScType::NodeStruct sc_node_role_relation ScType::NodeRole sc_node_norole_relation ScType::NodeNoRole sc_node_class ScType::NodeClass sc_node_abstract ScType::NodeAbstract sc_node_material ScType::NodeMaterial There are old keynodes, that used for backward compatibility: Keynode Equal sc-type New keynode sc_arc_main ScType::EdgeAccessConstPosPerm sc_edge_main sc_edge ScType::EdgeUCommon sc_edge_ucommon sc_arc_common ScType::EdgeDCommon sc_edge_dcommon sc_arc_access ScType::EdgeAccess sc_edge_access sc_node_not_relation ScType::NodeClass sc_node_class sc_node_not_binary_tuple ScType::NodeTuple sc_node_tuple There is an example of usage: SCs-code Equal SCg-code a < - sc_node_class;; a _-> _b;; _b < - sc_node_material;; _x => nrel_y: t;; nrel_y < - sc_node_norole_relation;;","title":"Keynodes"},{"location":"python/cpp_wrap/","text":"Global getScConfigValue - function that returns value from a sc-memory config file. configValue = getScConfigValue ( 'group' , 'value' ) ScAddr IsValid() if ScAddr is valid, then returns True ; otherwise - False ToInt() convert addr value to integer (equal C++ ScAddr::Hash ). Useful for debug purposes . __eq__() equal operator == . Can be used like this: if addr1 == addr2 : pass # do something __ne__() not equal operator != . Can be used like this: if addr1 != addr2 : pass # do something ScType This class equal to ScType in C++. Methods of this class: constructor you can create this class with input type combinations type1 = ScType () # equal to ScType.Unknown type2 = ScType . Node # see more constants below type3 = ScType . Node | ScType . Const # equal to ScType.NodeConst IsValid() if type is not ScType.Unknown , then returns True ; otherwise - False __eq__() equal operator == . Can be used like this: if type1 == type2 : pass # do something __ne__() not equal operator != . Can be used like this: if type1 != type2 : pass # do something __or__() bitwise or operator | . Can be used like this: type1 = ScType . Node type2 = ScType . Const type3 = type1 | type2 type3 == ScType . NodeConst # will be True __and__() bitwise and operator & . Can be used like this: type1 = ScType . NodeConst type2 = ScType . Node type3 = type1 & type2 type3 == type1 # will be True IsLink() if type represents a link, then returns True ; otherwise - False type1 = ScType . LinkConst type1 . IsLink () # returns True IsEdge() if type represents an edge, then returns True ; otherwise - False type1 = ScType . EdgeAccessConstFuzPerm type1 . IsEdge () # return True IsNode() if type represents a node, then returns True ; otherwise - False type1 = ScType . NodeConst type1 . IsNode () # returns True IsUnknown() if type is not Unknown , then returns True ; otherwise - False type1 = ScType . Node type1 . IsUnknown () # return True type2 = ScType () type2 . IsUnknown () # return False IsConst() if type represents constant, then returns True ; otherwise - False type1 = ScType () type1 . IsConst () # returns False type2 = ScType . NodeVar () type2 . IsConst () # return False type3 = ScType . Node () type3 . IsConst () # return False type4 = ScType . NodeConst () type4 . IsConst () # returns True IsVar() if type represents variable, then returns True ; otherwise - False type1 = ScType () type1 . IsVar () # returns False type2 = ScType . NodeVar () type2 . IsVar () # returns True type3 = ScType . Node () type3 . IsVar () # returns False type4 = ScType . NodeConst type4 . IsVar () # returns False ToInt() returns integer, that represents a type. Useful for debug purposes There are some predefined types . You can find them in types table (see C++ table). In Python you should use ScType.Node instead of ScType::Node ScIterator3 This class represents iterator for a triples (see iterators description ). There are a list of available methods: Next() move iterator to next triple. Returns True if moved to next triple; otherwise - False . Example of usage: while it3 . Next (): ... # do something Get(idx) idx - number that represents values index. \u042bhould be in range [0; 2] returns ScAddr of specified element in current triple. Example of usage: while it3 . Next (): src = it3 . Get ( 0 ) # source element in triple edge = it3 . Get ( 1 ) # edge in triple trg = it3 . Get ( 2 ) # target element in triple ... IsValid() returns True if iterator is valid; otherwise - False ScIterator5 This class represents iterator of 5-element constructions (see iterators description ). There are a list of available methods: Next() move iterator to next 5-element construction. Returns True if moved to next construction; otherwise - False . Example of usage: while it5 . Next (): ... # do something Get(idx) idx - number that represents values index. \u042bhould be in range [0; 4] returns ScAddr of specified element in current construction. Example of usage: while it5 . Next (): src = it5 . Get ( 0 ) # source element in triple edge = it5 . Get ( 1 ) # edge in triple trg = it5 . Get ( 2 ) # target element in triple attrEdge = it5 . Get ( 3 ) # edge from attribute set attr = it5 . Get ( 4 ) # attribute set ... IsValid() returns True if iterator is valid; otherwise - False ScLinkContent This class wrap content of link. It allows to unpack it to string , int or float . There are methods of this class: AsString() get content of a link as string value. content = ctx . GetLinkContent ( linkAddr ) stringValue = content . AsString () AsInt() get content of a link as int value. If length of content not equal to 8 bytes, then ExceptionInvalidType will be raised. content = ctx . GetLinkContent ( linkAddr ) intValue = content . AsInt () AsFloat() get content of a link as float value. If length of content not equal to 8 bytes, then ExceptionInvalidType will be raised. content = ctx . GetLinkContent ( linkAddr ) floatValue = content . AsFloat () AsBinary() get content of a link as memoryview value. content = ctx . GetLinkContent ( linkAddr ) binaryValue = content . AsBinary () Danger Object content should be alive until memory used GetType() return type of content. There are possible values: ScLinkContent.String ScLinkContent.Int ScLinkContent.Float ScTemplateGenParams This class accumulate parameters for a template generation. There are methods of this class: Add(paramName, valueAddr) paramName - parameter name ( str ) valueAddr - ScAddr of element that should be used with specified name (see more in templates description ) params = ScTemplateGenParams () params . Add ( \"_item\" , itemAddr ) ... Get(paramName) paramName - name of parameter ( str ) returns value of parameter with a specified name. If parameter with specified identifier exists, then returns it ScAddr ; otherwise - None addr = params . Get ( \"_item\" ) IsEmpty() if there are no any parameters added, then returns True ; otherwise - False ScTemplateGenResult This class wrap template generation result. There are methods of this class: Aliases() returns a dict of all used aliases in template (where key - alias , value - index in generate result). Keys can be used to get result values by __getitem__ Size() return number of elements __getitem__(alias) alias - name of result parameter ( str ) returns ScAddr by specified name. If there are no value with a specified name, then returns None addr = genResult [ \"node1\" ] ScTemplateSearchResultItem This class represents one result for a search by template. There are methods of this class: Size() return size of result (number of ScAddr 's equal to search construction) __getitem__(name_or_index) allows to get result items by any index: int , str . In case of int index you will just get ScAddr by index in result array (length equal to Size() ) this case suitable, when you need to iterate all addrs in result. Warning You will receive duplicate ScAddr 's, because result stored as array of founded triples. When you try to get ScAddr with str it will be found by alias (see templates for more info). If there are no element with specified index, then returns None resultSize = searchResultItem . Size () for i in range ( resultSize ): addr = searchResultItem [ i ] # iterate all addrs addr1 = searchResultItem [ \"alias\" ] # get by replacement name ScTemplateSearchResult This class represent list of results by template search. There are methods of this class: Aliases() returns a dict of all used aliases in template (where key - alias , value - index in search result). Keys can be used to get result values by __getitem__ Size() returns number of results. __getitem__() get result by specified index ( int should be less then Size() ). resultNum = searchResult . Size () for i in range ( resultNum ): searchResultItem = searchResult [ i ] # work with searchResultItem there see (ScTemplateSearchResult) ScMemoryContext Danger DO NOT use same context in different threads There are methods of this class: CreateNode(type) type - ScType of a node CreateEdge(type, src, trg) type - ScType of edge src - ScAddr of source edge element trg - ScAddr of target edge element create edge between src and trg elements. Returns ScAddr of created edge, but if returned ScAddr is not valid, then edge wasn't created. Example: edgeAddr = ctx . CreateEdge ( ScType . EdgeAccessConstPosPerm , srcAddr , trgAddr ) CreateLink() create link. Returns ScAddr of created link, but if returned ScAddr is not valid, then link wasn't created Example: linkAddr = ctx . CreateLink () GetName() returns name of context. Useful in debug purposes IsElement(addr) addr - ScAddr of element to check if element exist, then returns True ; otherwise - False Example: ctx . IsElement ( elementAddr ) GetElementType(addr) addr - ScAddr of element to get type returns type of specified element. If element doesn't exist, then returns ScType.Unknown Example: t = ctx . GetElementType ( elementAddr ) GetEdgeInfo(addr) addr - ScAddr of edge returns tuple (src, trg) , where: src - is a ScAddr of edge source element; trg - target element. If addr point to element that doesn't exist, or is not an edge, then returns (None, None) . Example: src , trg = ctx . GetEdgeInfo ( edgeAddr ) SetLinkContent(addr, content) addr - ScAddr of sc-link to set content content - content of sc-link, that should be set. Type of content should be one of: int , float , string . Change content of sc-link. If content changed, then returns True ; otherwise - False Example: ... ctx . SetLinkContent ( linkAddr1 , 56 ) ... ctx . SetLinkContent ( linkAddr1 , 56.0 ) ... ctx . SetLinkContent ( linkAddr1 , \"any text\" ) ... GetLinkContent(addr) addr - ScAddr of sc-link returns content of a specified link. If specified addr is not a link, or it doesn't exist, then returns None . Returned value has type ScLinkContent . Example: ... value = ctx . GetLinkContent ( elementAddr ) if value : print ( value ) ... Iterator3(param1, param2, param3) param1 , param2 , param3 - could be on of a type: ScAddr , ScType create iterator for a specified triple template. For more information about iterators see iterators description . If iterator created, then return ScIterator3 object; otherwise - None Example: itFAA = ctx . Iterator3 ( addr1 , ScType . EdgeAccessConstPosPerm , ScType . NodeVar ) while itFAA . Next (): pass # process iterated constructions there ... itFAF = ctx . Iterator3 ( addr1 , ScType . EdgeAccessConstPosPerm , addr2 ) while itFAF . Next (): pass # process iterated constructions there ... itAAF = ctx . Iterator3 ( ScType . NodeConst , ScType . EdgeAccessConstPosPerm , addr2 ) while itAAF . Next (): pass # process iterated constructions there Iterator5(param1, param2, param3, param4, param5) param1 , param2 , param3 , param4 , param5 - could be on of a type ScAddr , ScType create iterator for a specified 5-element construction. For more information about iterators see iterators description . If iterator created, then return ScIterator5 object; otherwise - None Example: itFAFAF = ctx . Iterator5 ( addr1 , ScType . EdgeAccessConstPosPerm , addr2 , ScType . EdgeAccessVarPosTemp , attr ) while itFAFAF . Next (): pass # process iterated constructions there ... itFAFAA = ctx . Iterator5 ( addr1 , ScType . EdgeAccessConstPosPerm , addr2 , ScType . EdgeAccessVarPosTemp , ScType . Node ) while itFAFAA . Next (): pass # process iterated constructions there ... itFAAAF = ctx . Iterator5 ( addr1 , ScType . EdgeAccessConstPosPerm , ScType . NodeVar , ScType . EdgeAccessVarPosTemp , attr ) while itFAAAF . Next (): pass # process iterated constructions there ... itFAAAA = ctx . Iterator5 ( addr1 , ScType . EdgeAccessConstPosPerm , ScType . NodeVar , ScType . EdgeAccessVarPosTemp , ScType . Node ) while itFAAAA . Next (): pass # process iterated constructions there ... itAAFAF = ctx . Iterator5 ( ScType . NodeConst , ScType . EdgeAccessConstPosPerm , addr2 , ScType . EdgeAccessVarPosTemp , attr ) while itAAFAF . Next (): pass # process iterated constructions there ... itAAFAA = ctx . Iterator5 ( ScType . NodeConst , ScType . EdgeAccessConstPosPerm , addr2 , ScType . EdgeAccessVarPosTemp , ScType . Node ) while itAAFAA . Next (): pass # process iterated constructions there HelperResolveSystemIdtf(idtf, type) idtf - str that represents a system identifier of sc-element type - ScType of sc-element resolve element by system identifier. This function tries to find element with specified system identifier - idtf . If element wasn't found and type is valid ( ScType.IsValid() ), then new element will be created with specified system identifier and type. If type is None , then new element wouldn't created and function returns invalid ScAddr . In other cases function returns ScAddr of element with specified system identifier. Example: addr = ctx . HelperResolveSystemIdtf ( \"nrel_main_idtf\" , ScType . NodeConstNoRole ) HelperSetSystemIdtf(idtf, addr) idtf - str new identifier of sc-element addr - ScAddr of element set specified system identifier - idtf , to element with specified addr . If identifier changed, then returns True ; otherwise - False Example: if ctx . HelperSetSystemIdtf ( \"new_idtf\" , addr ): pass # identifier changed else : pass # identifier not changed HelperGetSystemIdtf(addr) addr - ScAddr of sc-element to get identifier returns system identifier of a specified element. If system identifier exist, then it returns as a non empty string; otherwise result string would be empty. Example: idtfValue = ctx . HelperGetSystemIdtf ( addr ) HelperCheckEdge(srcAddr, trgAddr, edgeType) srcAddr - ScAddr of source edge sc-element trgAddr - ScAddr of target edge sc-element edgeType - ScType of edge to check if there are one or more edge with a specified type ( edgeType ) between srcAddr and trgAddr elements, then returns True ; otherwise - False Example: if ctx . HelperCheckEdge ( addr1 , addr2 , ScType . EdgeAccessConstPosPerm ): pass # edge between addr1 and addr2 exist else : pass # edge doesn't exists HelperGenTemplate(templ, params) templ - ScTemplate to generate construction params - ScTemplateGenParams parameters for construction generation generates construction by specified template with specified parameters. If construction generated, then returns instance of ScTemplateGenResult ; otherwise - None . Example: templ = ScTemplate () ... # fill template params = ScTemplateGenParams () ... # fill parameters result = ctx . HelperGenTemplate ( templ , params ) HelperSearchTemplate(templ) templ - ScTemplate to search construction searches construction by specified template. Returns ScTemplateSearchResult object instance. If it Size() equal to 0, then nothing was found Example: templ = ScTemplate () ... # fill template result = ctx . HelperSearchTemplate ( templ ) HelperBuildTemplate(data) data - ScAddr or str . If it's a ScAddr then it should point to sc-struct in memory, that is a template. It it's a str , then it should contains SCs-code that describes template returns ScTemplate instance. If template wasn't built, then return None * Example: templFromMemory = ctx . HelperBuildTemplate ( templAddr ) templFromStr = ctx . HelperBuildTemplate ( 'person _=> nrel_email:: _[];;' ) ... # work with template","title":"Wrapped classes"},{"location":"python/cpp_wrap/#global","text":"getScConfigValue - function that returns value from a sc-memory config file. configValue = getScConfigValue ( 'group' , 'value' )","title":"Global"},{"location":"python/cpp_wrap/#scaddr","text":"IsValid() if ScAddr is valid, then returns True ; otherwise - False ToInt() convert addr value to integer (equal C++ ScAddr::Hash ). Useful for debug purposes . __eq__() equal operator == . Can be used like this: if addr1 == addr2 : pass # do something __ne__() not equal operator != . Can be used like this: if addr1 != addr2 : pass # do something","title":"ScAddr"},{"location":"python/cpp_wrap/#sctype","text":"This class equal to ScType in C++. Methods of this class: constructor you can create this class with input type combinations type1 = ScType () # equal to ScType.Unknown type2 = ScType . Node # see more constants below type3 = ScType . Node | ScType . Const # equal to ScType.NodeConst IsValid() if type is not ScType.Unknown , then returns True ; otherwise - False __eq__() equal operator == . Can be used like this: if type1 == type2 : pass # do something __ne__() not equal operator != . Can be used like this: if type1 != type2 : pass # do something __or__() bitwise or operator | . Can be used like this: type1 = ScType . Node type2 = ScType . Const type3 = type1 | type2 type3 == ScType . NodeConst # will be True __and__() bitwise and operator & . Can be used like this: type1 = ScType . NodeConst type2 = ScType . Node type3 = type1 & type2 type3 == type1 # will be True IsLink() if type represents a link, then returns True ; otherwise - False type1 = ScType . LinkConst type1 . IsLink () # returns True IsEdge() if type represents an edge, then returns True ; otherwise - False type1 = ScType . EdgeAccessConstFuzPerm type1 . IsEdge () # return True IsNode() if type represents a node, then returns True ; otherwise - False type1 = ScType . NodeConst type1 . IsNode () # returns True IsUnknown() if type is not Unknown , then returns True ; otherwise - False type1 = ScType . Node type1 . IsUnknown () # return True type2 = ScType () type2 . IsUnknown () # return False IsConst() if type represents constant, then returns True ; otherwise - False type1 = ScType () type1 . IsConst () # returns False type2 = ScType . NodeVar () type2 . IsConst () # return False type3 = ScType . Node () type3 . IsConst () # return False type4 = ScType . NodeConst () type4 . IsConst () # returns True IsVar() if type represents variable, then returns True ; otherwise - False type1 = ScType () type1 . IsVar () # returns False type2 = ScType . NodeVar () type2 . IsVar () # returns True type3 = ScType . Node () type3 . IsVar () # returns False type4 = ScType . NodeConst type4 . IsVar () # returns False ToInt() returns integer, that represents a type. Useful for debug purposes There are some predefined types . You can find them in types table (see C++ table). In Python you should use ScType.Node instead of ScType::Node","title":"ScType"},{"location":"python/cpp_wrap/#sciterator3","text":"This class represents iterator for a triples (see iterators description ). There are a list of available methods: Next() move iterator to next triple. Returns True if moved to next triple; otherwise - False . Example of usage: while it3 . Next (): ... # do something Get(idx) idx - number that represents values index. \u042bhould be in range [0; 2] returns ScAddr of specified element in current triple. Example of usage: while it3 . Next (): src = it3 . Get ( 0 ) # source element in triple edge = it3 . Get ( 1 ) # edge in triple trg = it3 . Get ( 2 ) # target element in triple ... IsValid() returns True if iterator is valid; otherwise - False","title":"ScIterator3"},{"location":"python/cpp_wrap/#sciterator5","text":"This class represents iterator of 5-element constructions (see iterators description ). There are a list of available methods: Next() move iterator to next 5-element construction. Returns True if moved to next construction; otherwise - False . Example of usage: while it5 . Next (): ... # do something Get(idx) idx - number that represents values index. \u042bhould be in range [0; 4] returns ScAddr of specified element in current construction. Example of usage: while it5 . Next (): src = it5 . Get ( 0 ) # source element in triple edge = it5 . Get ( 1 ) # edge in triple trg = it5 . Get ( 2 ) # target element in triple attrEdge = it5 . Get ( 3 ) # edge from attribute set attr = it5 . Get ( 4 ) # attribute set ... IsValid() returns True if iterator is valid; otherwise - False","title":"ScIterator5"},{"location":"python/cpp_wrap/#sclinkcontent","text":"This class wrap content of link. It allows to unpack it to string , int or float . There are methods of this class: AsString() get content of a link as string value. content = ctx . GetLinkContent ( linkAddr ) stringValue = content . AsString () AsInt() get content of a link as int value. If length of content not equal to 8 bytes, then ExceptionInvalidType will be raised. content = ctx . GetLinkContent ( linkAddr ) intValue = content . AsInt () AsFloat() get content of a link as float value. If length of content not equal to 8 bytes, then ExceptionInvalidType will be raised. content = ctx . GetLinkContent ( linkAddr ) floatValue = content . AsFloat () AsBinary() get content of a link as memoryview value. content = ctx . GetLinkContent ( linkAddr ) binaryValue = content . AsBinary () Danger Object content should be alive until memory used GetType() return type of content. There are possible values: ScLinkContent.String ScLinkContent.Int ScLinkContent.Float","title":"ScLinkContent"},{"location":"python/cpp_wrap/#sctemplategenparams","text":"This class accumulate parameters for a template generation. There are methods of this class: Add(paramName, valueAddr) paramName - parameter name ( str ) valueAddr - ScAddr of element that should be used with specified name (see more in templates description ) params = ScTemplateGenParams () params . Add ( \"_item\" , itemAddr ) ... Get(paramName) paramName - name of parameter ( str ) returns value of parameter with a specified name. If parameter with specified identifier exists, then returns it ScAddr ; otherwise - None addr = params . Get ( \"_item\" ) IsEmpty() if there are no any parameters added, then returns True ; otherwise - False","title":"ScTemplateGenParams"},{"location":"python/cpp_wrap/#sctemplategenresult","text":"This class wrap template generation result. There are methods of this class: Aliases() returns a dict of all used aliases in template (where key - alias , value - index in generate result). Keys can be used to get result values by __getitem__ Size() return number of elements __getitem__(alias) alias - name of result parameter ( str ) returns ScAddr by specified name. If there are no value with a specified name, then returns None addr = genResult [ \"node1\" ]","title":"ScTemplateGenResult"},{"location":"python/cpp_wrap/#sctemplatesearchresultitem","text":"This class represents one result for a search by template. There are methods of this class: Size() return size of result (number of ScAddr 's equal to search construction) __getitem__(name_or_index) allows to get result items by any index: int , str . In case of int index you will just get ScAddr by index in result array (length equal to Size() ) this case suitable, when you need to iterate all addrs in result. Warning You will receive duplicate ScAddr 's, because result stored as array of founded triples. When you try to get ScAddr with str it will be found by alias (see templates for more info). If there are no element with specified index, then returns None resultSize = searchResultItem . Size () for i in range ( resultSize ): addr = searchResultItem [ i ] # iterate all addrs addr1 = searchResultItem [ \"alias\" ] # get by replacement name","title":"ScTemplateSearchResultItem"},{"location":"python/cpp_wrap/#sctemplatesearchresult","text":"This class represent list of results by template search. There are methods of this class: Aliases() returns a dict of all used aliases in template (where key - alias , value - index in search result). Keys can be used to get result values by __getitem__ Size() returns number of results. __getitem__() get result by specified index ( int should be less then Size() ). resultNum = searchResult . Size () for i in range ( resultNum ): searchResultItem = searchResult [ i ] # work with searchResultItem there see (ScTemplateSearchResult)","title":"ScTemplateSearchResult"},{"location":"python/cpp_wrap/#scmemorycontext","text":"Danger DO NOT use same context in different threads There are methods of this class: CreateNode(type) type - ScType of a node CreateEdge(type, src, trg) type - ScType of edge src - ScAddr of source edge element trg - ScAddr of target edge element create edge between src and trg elements. Returns ScAddr of created edge, but if returned ScAddr is not valid, then edge wasn't created. Example: edgeAddr = ctx . CreateEdge ( ScType . EdgeAccessConstPosPerm , srcAddr , trgAddr ) CreateLink() create link. Returns ScAddr of created link, but if returned ScAddr is not valid, then link wasn't created Example: linkAddr = ctx . CreateLink () GetName() returns name of context. Useful in debug purposes IsElement(addr) addr - ScAddr of element to check if element exist, then returns True ; otherwise - False Example: ctx . IsElement ( elementAddr ) GetElementType(addr) addr - ScAddr of element to get type returns type of specified element. If element doesn't exist, then returns ScType.Unknown Example: t = ctx . GetElementType ( elementAddr ) GetEdgeInfo(addr) addr - ScAddr of edge returns tuple (src, trg) , where: src - is a ScAddr of edge source element; trg - target element. If addr point to element that doesn't exist, or is not an edge, then returns (None, None) . Example: src , trg = ctx . GetEdgeInfo ( edgeAddr ) SetLinkContent(addr, content) addr - ScAddr of sc-link to set content content - content of sc-link, that should be set. Type of content should be one of: int , float , string . Change content of sc-link. If content changed, then returns True ; otherwise - False Example: ... ctx . SetLinkContent ( linkAddr1 , 56 ) ... ctx . SetLinkContent ( linkAddr1 , 56.0 ) ... ctx . SetLinkContent ( linkAddr1 , \"any text\" ) ... GetLinkContent(addr) addr - ScAddr of sc-link returns content of a specified link. If specified addr is not a link, or it doesn't exist, then returns None . Returned value has type ScLinkContent . Example: ... value = ctx . GetLinkContent ( elementAddr ) if value : print ( value ) ... Iterator3(param1, param2, param3) param1 , param2 , param3 - could be on of a type: ScAddr , ScType create iterator for a specified triple template. For more information about iterators see iterators description . If iterator created, then return ScIterator3 object; otherwise - None Example: itFAA = ctx . Iterator3 ( addr1 , ScType . EdgeAccessConstPosPerm , ScType . NodeVar ) while itFAA . Next (): pass # process iterated constructions there ... itFAF = ctx . Iterator3 ( addr1 , ScType . EdgeAccessConstPosPerm , addr2 ) while itFAF . Next (): pass # process iterated constructions there ... itAAF = ctx . Iterator3 ( ScType . NodeConst , ScType . EdgeAccessConstPosPerm , addr2 ) while itAAF . Next (): pass # process iterated constructions there Iterator5(param1, param2, param3, param4, param5) param1 , param2 , param3 , param4 , param5 - could be on of a type ScAddr , ScType create iterator for a specified 5-element construction. For more information about iterators see iterators description . If iterator created, then return ScIterator5 object; otherwise - None Example: itFAFAF = ctx . Iterator5 ( addr1 , ScType . EdgeAccessConstPosPerm , addr2 , ScType . EdgeAccessVarPosTemp , attr ) while itFAFAF . Next (): pass # process iterated constructions there ... itFAFAA = ctx . Iterator5 ( addr1 , ScType . EdgeAccessConstPosPerm , addr2 , ScType . EdgeAccessVarPosTemp , ScType . Node ) while itFAFAA . Next (): pass # process iterated constructions there ... itFAAAF = ctx . Iterator5 ( addr1 , ScType . EdgeAccessConstPosPerm , ScType . NodeVar , ScType . EdgeAccessVarPosTemp , attr ) while itFAAAF . Next (): pass # process iterated constructions there ... itFAAAA = ctx . Iterator5 ( addr1 , ScType . EdgeAccessConstPosPerm , ScType . NodeVar , ScType . EdgeAccessVarPosTemp , ScType . Node ) while itFAAAA . Next (): pass # process iterated constructions there ... itAAFAF = ctx . Iterator5 ( ScType . NodeConst , ScType . EdgeAccessConstPosPerm , addr2 , ScType . EdgeAccessVarPosTemp , attr ) while itAAFAF . Next (): pass # process iterated constructions there ... itAAFAA = ctx . Iterator5 ( ScType . NodeConst , ScType . EdgeAccessConstPosPerm , addr2 , ScType . EdgeAccessVarPosTemp , ScType . Node ) while itAAFAA . Next (): pass # process iterated constructions there HelperResolveSystemIdtf(idtf, type) idtf - str that represents a system identifier of sc-element type - ScType of sc-element resolve element by system identifier. This function tries to find element with specified system identifier - idtf . If element wasn't found and type is valid ( ScType.IsValid() ), then new element will be created with specified system identifier and type. If type is None , then new element wouldn't created and function returns invalid ScAddr . In other cases function returns ScAddr of element with specified system identifier. Example: addr = ctx . HelperResolveSystemIdtf ( \"nrel_main_idtf\" , ScType . NodeConstNoRole ) HelperSetSystemIdtf(idtf, addr) idtf - str new identifier of sc-element addr - ScAddr of element set specified system identifier - idtf , to element with specified addr . If identifier changed, then returns True ; otherwise - False Example: if ctx . HelperSetSystemIdtf ( \"new_idtf\" , addr ): pass # identifier changed else : pass # identifier not changed HelperGetSystemIdtf(addr) addr - ScAddr of sc-element to get identifier returns system identifier of a specified element. If system identifier exist, then it returns as a non empty string; otherwise result string would be empty. Example: idtfValue = ctx . HelperGetSystemIdtf ( addr ) HelperCheckEdge(srcAddr, trgAddr, edgeType) srcAddr - ScAddr of source edge sc-element trgAddr - ScAddr of target edge sc-element edgeType - ScType of edge to check if there are one or more edge with a specified type ( edgeType ) between srcAddr and trgAddr elements, then returns True ; otherwise - False Example: if ctx . HelperCheckEdge ( addr1 , addr2 , ScType . EdgeAccessConstPosPerm ): pass # edge between addr1 and addr2 exist else : pass # edge doesn't exists HelperGenTemplate(templ, params) templ - ScTemplate to generate construction params - ScTemplateGenParams parameters for construction generation generates construction by specified template with specified parameters. If construction generated, then returns instance of ScTemplateGenResult ; otherwise - None . Example: templ = ScTemplate () ... # fill template params = ScTemplateGenParams () ... # fill parameters result = ctx . HelperGenTemplate ( templ , params ) HelperSearchTemplate(templ) templ - ScTemplate to search construction searches construction by specified template. Returns ScTemplateSearchResult object instance. If it Size() equal to 0, then nothing was found Example: templ = ScTemplate () ... # fill template result = ctx . HelperSearchTemplate ( templ ) HelperBuildTemplate(data) data - ScAddr or str . If it's a ScAddr then it should point to sc-struct in memory, that is a template. It it's a str , then it should contains SCs-code that describes template returns ScTemplate instance. If template wasn't built, then return None * Example: templFromMemory = ctx . HelperBuildTemplate ( templAddr ) templFromStr = ctx . HelperBuildTemplate ( 'person _=> nrel_email:: _[];;' ) ... # work with template","title":"ScMemoryContext"},{"location":"python/library/","text":"Python library contains python implementation of useful classes and functions to work with sc-memory. There are a list of classes: ScAgent ScKeynodes ScHelper ScSet ScAgent Object that implements ScAgent behaviour. This is a smart wrapper on event listener. It runs code on registered event emit. Create it with such parameters: module - ScModule Methods Register(addr, evt_type) addr - ScAddr of element to listen events evt_type - ScPythonEventType type of event to listen Register ScAgent to run on spcified event emit. Example: agent = MyScAgent () agent . Register ( self . keynodes [ ScAgent . kCmdInitiated ], ScPythonEventType . AddOutputEdge ) Unregister() Unregister ScAgent from previously registered event CheckImpl(evt) evt - ScEventParams structure that describes emited event This method calls after event emit to check if ScAgent should run on this event. You can override this method to implement your own check. It should return True when check passed; otherwise - False . Default implementation returns True . Example: class MyScAgent ( ScAgent ): def CheckImpl ( self , evt ): # do extra check there return ... RunImpl(evt) evt - ScEventParams structure that describes emited event This method should be everriden. It calls after passed CheckImpl returns True . Whole logic of agent should be implemented there. ScAgentCommand Object that implement ScAgent logic to work with a commands. It built on top of ScAgent object, but you should not override RunImpl of this one . Instead of that you should write your custom logic in overriden DoCommand method. To create this object you should provide two parameters: module - ScModule cmd_class_addr - ScAddr of command class Methods DoCommand() Returns command process result ScResult . You can access command and result addrs in this function with self.cmd_addr and self.result_set StaticMethods CreateCommand(ctx, cmd_class_addr, params) ctx - ScMemoryContext that will be used to access sc-memory cmd_class_addr - ScAddr of command class params - ScAddr[] array of parameters for a command Create instance of a specified command class with a parameters and returns ScAddr of generated one. Example: ScAgentCommand . CreateCommand ( my_cmd_class , [ param_1 , param_2 ]) will generate such command in ScMemory cmd_instance <- my_cmd_class ; -> rrel_1 : param_1 ; -> rrel_2 : param_2 ;; RunCommand(ctx, cmd_addr) ctx - ScMemoryContext that will be used to access sc-memory cmd_addr - ScAddr of command to run Returns True on command run; otherwise - False . Improtant: this function doesn't block thread. It runs command asynchronously. Example: cmd = ScAgentCommand . Create ( my_cmd_class , [ param_1 , param_2 ]) if ScAgentCommand . RunCommand ( cmd ): print ( \"Command run\" ) else : print ( \"Can't run command\" ) RunCommandWait(ctx, cmd_addr, wait_timeout_ms) ctx - ScMemoryContext that will be used to access sc-memory cmd_addr - ScAddr of command to run wait_timeout_ms - wait timeout in milliseconds Returns True on command run and finished in specified timeout; otherwise - False . Improtant: this function block thread until command finishes. It runs comman synchronous. Example: cmd = ScAgentCommand . Create ( my_cmd_class , [ param_1 , param_2 ]) if ScAgentCommand . RunCommandWait ( cmd ): print ( \"Command run and finished\" ) else : print ( \"Can't run command\" ) GetCommandResultAddr(ctx, cmd_addr) ctx - ScMemoryContext that will be used to access sc-memory cmd_addr - ScAddr of command Returns ScAddr of result structure for a specified comand. If there are no result structure, then returns empty ScAddr ScEventParams ScHelper Object that wrap some common functions to work with knowledge base. You can create it with such parameters: ctx - ScMemoryContext that will be used to access sc-memory Methods kbSetBinaryRelationLinkValue( _addr , _relAddr , _value ) _addr - ScAddr of sc-element to change value by relation _relAddr - ScAddr of relation node _value - int | float | str new value of sc-link Set value of sc-link connected to _addr with _relAddr relation: _addr _=> _relAddr : [value] ;; If there are not value linked with _addr by relation _relAddr , then this function create it; otherwise just change value of sc-link to new one. kbGetBinaryRelationLinkValue( _addr , _relAddr ) _addr - ScAddr of sc-element to get value by relation _relAddr - ScAddr of relation node Return ScLinkContent value of sc-link by template: _addr _=> _relAddr : [value] ;; If there are no such construction, then returns None . kbReplaceBinaryRelation( _addr , _relAddr , _newTarget ) _addr - ScAddr _relAddr - ScAddr _newTarget - ScAddr Remove any construction that corresponds to template: _addr _=> _relAddr : _ ... ;; After that new construction will be created with template: _addr _=> _relAddr : _newTarget ;; Returns True , when new relation created; otherwise - False . kbUpdateStructureValues( _addr , _values ) _addr - ScAddr of structure to update _values - list of tuples: (_rrel_addr, _new_value) . Where _new_value can be ScAddr , str , float , int . In case, when _new_value is not a ScAddr ScLink will be used with a content that equal to _new_value This function setup values for each item in a tuple _values by template: _addr _-> _rrel_addr :: _new_value ;; Example code: helper . kbUpdateStructureValues ( structAddr , [ ( rrel_name , 'name' ), ( rrel_height , 178 ), ( rrel_mass , 79.6 ), ( rrel_other_addr , any_addr ) ]) will produce such sc-construction: structAddr -> rrel_name : [name] ; -> rrel_height : [178] ; -> rrel_mass : [79.6] ; -> rrel_other_addr : any_addr ;; If any of field, already exist, then it would be replaced by a new value. ScKeynodes Object that implements caching of keynodes. This objects cache requested ScAddr 's so you can access it when you need from any places. Create it with such parameters: ctx - ScMemoryContext that will be used to access sc-memory Methods __getitem__(sys_idtf) sys_idtf - system identifier of keynode returns ScAddr of keynodes with specified system identifier. If keynode doesn't exist, then returns invalid ScAddr Example: keynodes = ScKeynodes ( ctx ) addr1 = keynodes [ \"keynode_idtf\" ] # will find it in sc-memory addr2 = keynodes [ \"keynode_idtf_2\" ] # will find it in sc-memory addr3 = keynodes [ \"keynode_idtf\" ] # will return cached value equal to addr1 ScModule ScSet","title":"Library"},{"location":"python/library/#scagent","text":"Object that implements ScAgent behaviour. This is a smart wrapper on event listener. It runs code on registered event emit. Create it with such parameters: module - ScModule Methods Register(addr, evt_type) addr - ScAddr of element to listen events evt_type - ScPythonEventType type of event to listen Register ScAgent to run on spcified event emit. Example: agent = MyScAgent () agent . Register ( self . keynodes [ ScAgent . kCmdInitiated ], ScPythonEventType . AddOutputEdge ) Unregister() Unregister ScAgent from previously registered event CheckImpl(evt) evt - ScEventParams structure that describes emited event This method calls after event emit to check if ScAgent should run on this event. You can override this method to implement your own check. It should return True when check passed; otherwise - False . Default implementation returns True . Example: class MyScAgent ( ScAgent ): def CheckImpl ( self , evt ): # do extra check there return ... RunImpl(evt) evt - ScEventParams structure that describes emited event This method should be everriden. It calls after passed CheckImpl returns True . Whole logic of agent should be implemented there.","title":"ScAgent"},{"location":"python/library/#scagentcommand","text":"Object that implement ScAgent logic to work with a commands. It built on top of ScAgent object, but you should not override RunImpl of this one . Instead of that you should write your custom logic in overriden DoCommand method. To create this object you should provide two parameters: module - ScModule cmd_class_addr - ScAddr of command class Methods DoCommand() Returns command process result ScResult . You can access command and result addrs in this function with self.cmd_addr and self.result_set StaticMethods CreateCommand(ctx, cmd_class_addr, params) ctx - ScMemoryContext that will be used to access sc-memory cmd_class_addr - ScAddr of command class params - ScAddr[] array of parameters for a command Create instance of a specified command class with a parameters and returns ScAddr of generated one. Example: ScAgentCommand . CreateCommand ( my_cmd_class , [ param_1 , param_2 ]) will generate such command in ScMemory cmd_instance <- my_cmd_class ; -> rrel_1 : param_1 ; -> rrel_2 : param_2 ;; RunCommand(ctx, cmd_addr) ctx - ScMemoryContext that will be used to access sc-memory cmd_addr - ScAddr of command to run Returns True on command run; otherwise - False . Improtant: this function doesn't block thread. It runs command asynchronously. Example: cmd = ScAgentCommand . Create ( my_cmd_class , [ param_1 , param_2 ]) if ScAgentCommand . RunCommand ( cmd ): print ( \"Command run\" ) else : print ( \"Can't run command\" ) RunCommandWait(ctx, cmd_addr, wait_timeout_ms) ctx - ScMemoryContext that will be used to access sc-memory cmd_addr - ScAddr of command to run wait_timeout_ms - wait timeout in milliseconds Returns True on command run and finished in specified timeout; otherwise - False . Improtant: this function block thread until command finishes. It runs comman synchronous. Example: cmd = ScAgentCommand . Create ( my_cmd_class , [ param_1 , param_2 ]) if ScAgentCommand . RunCommandWait ( cmd ): print ( \"Command run and finished\" ) else : print ( \"Can't run command\" ) GetCommandResultAddr(ctx, cmd_addr) ctx - ScMemoryContext that will be used to access sc-memory cmd_addr - ScAddr of command Returns ScAddr of result structure for a specified comand. If there are no result structure, then returns empty ScAddr","title":"ScAgentCommand"},{"location":"python/library/#sceventparams","text":"","title":"ScEventParams"},{"location":"python/library/#schelper","text":"Object that wrap some common functions to work with knowledge base. You can create it with such parameters: ctx - ScMemoryContext that will be used to access sc-memory Methods kbSetBinaryRelationLinkValue( _addr , _relAddr , _value ) _addr - ScAddr of sc-element to change value by relation _relAddr - ScAddr of relation node _value - int | float | str new value of sc-link Set value of sc-link connected to _addr with _relAddr relation: _addr _=> _relAddr : [value] ;; If there are not value linked with _addr by relation _relAddr , then this function create it; otherwise just change value of sc-link to new one. kbGetBinaryRelationLinkValue( _addr , _relAddr ) _addr - ScAddr of sc-element to get value by relation _relAddr - ScAddr of relation node Return ScLinkContent value of sc-link by template: _addr _=> _relAddr : [value] ;; If there are no such construction, then returns None . kbReplaceBinaryRelation( _addr , _relAddr , _newTarget ) _addr - ScAddr _relAddr - ScAddr _newTarget - ScAddr Remove any construction that corresponds to template: _addr _=> _relAddr : _ ... ;; After that new construction will be created with template: _addr _=> _relAddr : _newTarget ;; Returns True , when new relation created; otherwise - False . kbUpdateStructureValues( _addr , _values ) _addr - ScAddr of structure to update _values - list of tuples: (_rrel_addr, _new_value) . Where _new_value can be ScAddr , str , float , int . In case, when _new_value is not a ScAddr ScLink will be used with a content that equal to _new_value This function setup values for each item in a tuple _values by template: _addr _-> _rrel_addr :: _new_value ;; Example code: helper . kbUpdateStructureValues ( structAddr , [ ( rrel_name , 'name' ), ( rrel_height , 178 ), ( rrel_mass , 79.6 ), ( rrel_other_addr , any_addr ) ]) will produce such sc-construction: structAddr -> rrel_name : [name] ; -> rrel_height : [178] ; -> rrel_mass : [79.6] ; -> rrel_other_addr : any_addr ;; If any of field, already exist, then it would be replaced by a new value.","title":"ScHelper"},{"location":"python/library/#sckeynodes","text":"Object that implements caching of keynodes. This objects cache requested ScAddr 's so you can access it when you need from any places. Create it with such parameters: ctx - ScMemoryContext that will be used to access sc-memory Methods __getitem__(sys_idtf) sys_idtf - system identifier of keynode returns ScAddr of keynodes with specified system identifier. If keynode doesn't exist, then returns invalid ScAddr Example: keynodes = ScKeynodes ( ctx ) addr1 = keynodes [ \"keynode_idtf\" ] # will find it in sc-memory addr2 = keynodes [ \"keynode_idtf_2\" ] # will find it in sc-memory addr3 = keynodes [ \"keynode_idtf\" ] # will return cached value equal to addr1","title":"ScKeynodes"},{"location":"python/library/#scmodule","text":"","title":"ScModule"},{"location":"python/library/#scset","text":"","title":"ScSet"},{"location":"python/python/","text":"Python You can implement agents using Python 3 . All python modules should be implemented with specified rules. You can specify search paths of a python modules by python.modules_path value in a configuration file . Usage example There are two ways to run python script: when you need run script and wait it finished, then just use this code: #include <sc-memory/cpp/python/sc_python_interp.hpp> ... void doSomething () { ... py :: ScPythonInterpreter :: RunScript ( \"lg/tv_service.py\" , m_bridge ); ... } Then in python you can write any code you want: import any_module # create context (with minimal access) ctx = ScMemoryContext . Create ( 'context name' ) # create node nodeAddr = ctx . CreateNode ( ScType . NodeConst ) ... # you can use any installed python libraries any_module . doSomething () if you want to run script as a service and communicate with it, then use code: my_service.hpp #pragma once #include <sc-memory/cpp/python/sc_python_service.hpp> class MyService : public py :: ScPythonService { public : MyService (); private : virtual void RunImpl () override ; virtual void StopImpl () override ; }; } my_service.cpp #include \"my_service.hpp\" MyService :: MyService () : ScPythonService ( \"my_service.py\" ) { } void MyService :: RunImpl () { // your run code that need to be run after service started } void MyService :: StopImpl () { // your run code that need to be run after service stopped } Then in python code use common module: my_service.py from common import ScModule class TestModule ( ScModule ): def __init__ ( self ): ScModule . __init__ ( self , ctx = __ctx__ , cpp_bridge = __cpp_bridge__ , keynodes = [ ]) def DoSomething ( self ): pass def OnContentChanged ( self , evt_data ): pass def OnInitialize ( self , params ): # subscribe to any event self . events . CreateEventContentChanged ( content_addr , self . OnContentChanged ) def OnShutdown ( self ): pass module = TestModule () module . Run ()","title":"Common"},{"location":"python/python/#python","text":"You can implement agents using Python 3 . All python modules should be implemented with specified rules. You can specify search paths of a python modules by python.modules_path value in a configuration file .","title":"Python"},{"location":"python/python/#usage-example","text":"There are two ways to run python script: when you need run script and wait it finished, then just use this code: #include <sc-memory/cpp/python/sc_python_interp.hpp> ... void doSomething () { ... py :: ScPythonInterpreter :: RunScript ( \"lg/tv_service.py\" , m_bridge ); ... } Then in python you can write any code you want: import any_module # create context (with minimal access) ctx = ScMemoryContext . Create ( 'context name' ) # create node nodeAddr = ctx . CreateNode ( ScType . NodeConst ) ... # you can use any installed python libraries any_module . doSomething () if you want to run script as a service and communicate with it, then use code: my_service.hpp #pragma once #include <sc-memory/cpp/python/sc_python_service.hpp> class MyService : public py :: ScPythonService { public : MyService (); private : virtual void RunImpl () override ; virtual void StopImpl () override ; }; } my_service.cpp #include \"my_service.hpp\" MyService :: MyService () : ScPythonService ( \"my_service.py\" ) { } void MyService :: RunImpl () { // your run code that need to be run after service started } void MyService :: StopImpl () { // your run code that need to be run after service stopped } Then in python code use common module: my_service.py from common import ScModule class TestModule ( ScModule ): def __init__ ( self ): ScModule . __init__ ( self , ctx = __ctx__ , cpp_bridge = __cpp_bridge__ , keynodes = [ ]) def DoSomething ( self ): pass def OnContentChanged ( self , evt_data ): pass def OnInitialize ( self , params ): # subscribe to any event self . events . CreateEventContentChanged ( content_addr , self . OnContentChanged ) def OnShutdown ( self ): pass module = TestModule () module . Run ()","title":"Usage example"},{"location":"tools/kb_builder/","text":"Builder Builder tool allow to build knowledge base from a sources. You can find it in a bin directory. There are options of this tool: sc-builder --help Builder usage: --help Display this message --version Displays version number -i [ --input-path ] arg Path to directory with sources -o [ --output-path ] arg Path to output directory (repository) -e [ --extension-path ] arg Path to extensions directory --enabled-ext arg Path to file with enabled extensions -c [ --clear-output ] Clear output directory (repository) before build -s [ --settings ] arg Path to configuration file for sc-memory -f [ --auto-formats ] Enable automatic formats info generation Example of usage: ./bin/sc-builder -i ./kb -o ./kb.bin -c -s ./bin/config.ini -f -e ./bin/extension Extensions There is a possibility to specify which extensions will be runned during a knowledge base building. You can specify that with parameter --enabled-ext . Value of this parameter is a path to file that contains list of allowed extensions. Example of file content: sc-utils sc-python In that case just sc-utils and sc-python extensions will be loaded during knowledge base build process. Example of usage: ./bin/sc-builder -i ./kb -o ./kb.bin -c -s ./bin/config.ini -f -e ./bin/extension --enabled-ext ./config/build_ext.list","title":"Builder"},{"location":"tools/kb_builder/#builder","text":"Builder tool allow to build knowledge base from a sources. You can find it in a bin directory. There are options of this tool: sc-builder --help Builder usage: --help Display this message --version Displays version number -i [ --input-path ] arg Path to directory with sources -o [ --output-path ] arg Path to output directory (repository) -e [ --extension-path ] arg Path to extensions directory --enabled-ext arg Path to file with enabled extensions -c [ --clear-output ] Clear output directory (repository) before build -s [ --settings ] arg Path to configuration file for sc-memory -f [ --auto-formats ] Enable automatic formats info generation Example of usage: ./bin/sc-builder -i ./kb -o ./kb.bin -c -s ./bin/config.ini -f -e ./bin/extension","title":"Builder"},{"location":"tools/kb_builder/#extensions","text":"There is a possibility to specify which extensions will be runned during a knowledge base building. You can specify that with parameter --enabled-ext . Value of this parameter is a path to file that contains list of allowed extensions. Example of file content: sc-utils sc-python In that case just sc-utils and sc-python extensions will be loaded during knowledge base build process. Example of usage: ./bin/sc-builder -i ./kb -o ./kb.bin -c -s ./bin/config.ini -f -e ./bin/extension --enabled-ext ./config/build_ext.list","title":"Extensions"},{"location":"tools/web/","text":"Web interface Build cd web/client yarn && yarn run webpack-dev Run Run sc-server example command: sc-server -r kb.bin -e extensions -i config.ini -c Open URL http://localhost:8090/ in web browser: Usage In current version you can run just only template search. Use SCs-text to specify search template.","title":"Web"},{"location":"tools/web/#web-interface","text":"","title":"Web interface"},{"location":"tools/web/#build","text":"cd web/client yarn && yarn run webpack-dev","title":"Build"},{"location":"tools/web/#run","text":"Run sc-server example command: sc-server -r kb.bin -e extensions -i config.ini -c Open URL http://localhost:8090/ in web browser:","title":"Run"},{"location":"tools/web/#usage","text":"In current version you can run just only template search. Use SCs-text to specify search template.","title":"Usage"}]}